<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="viewRepresentation">
<entry key="jsNamespace" type="xstring" value="sunburst_namespace"/>
<config key="jsCode">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="(sunburst_namespace = function() {%%00010%%00010%%00009var view = {};%%00010%%00009var _representation, _value;%%00010%%00009var knimeTable1, knimeTable2;%%00010%%00009var _data = {};%%00010%%00009var uniqueLabels;%%00010%%00009var nodes;%%00010%%00009var selectedRows = [];%%00010%%00009var highlitedPath;%%00010%%00009var zoomNode;%%00010%%00009var rowKey2leaf = {};%%00010%%00009var currentFilter = null;%%00010%%00009var _colorMap;%%00010%%00009var mouseMode = &quot;highlite&quot;;%%00010%%00009var totalSize;%%00010%%00009var selectionChangedFlag = false;%%00010%%00010%%00010%%00009var layoutContainer;%%00010%%00009var MIN_HEIGHT = 100, MIN_WIDTH = 100;%%00010%%00010%%00009var rootNodeName = &quot;root&quot;;%%00010%%00009var nullNodeName = &quot;?&quot;;%%00010%%00010%%00009var innerLabelStyles = ['sum', 'percentage'];%%00010%%00010%%00009view.init = function(representation, value) {%%00010%%00009%%00009_representation = representation;%%00010%%00009%%00009_value = value;%%00010%%00010%%00009%%00009// Load data from port 1 into knime table.%%00010%%00009%%00009knimeTable1 = new kt();%%00010%%00009%%00009knimeTable1.setDataTable(_representation.inObjects[0]);%%00010%%00010%%00009%%00009if (_value.options.mouseMode) {%%00010%%00009%%00009%%00009mouseMode = _value.options.mouseMode;%%00010%%00009%%00009}%%00010%%00009%%00009if (_value.options.selectedRows) {%%00010%%00009%%00009%%00009selectedRows = _value.options.selectedRows;%%00010%%00009%%00009}%%00010%%00009%%00009if (_value.options.highlitedPath) {%%00010%%00009%%00009%%00009highlitedPath = _value.options.highlitedPath;%%00010%%00009%%00009}%%00010%%00010%%00009%%00009transformData();%%00010%%00009%%00009setColors();%%00010%%00009%%00009drawControls();%%00010%%00009%%00009drawChart();%%00010%%00009%%00009toggleFilter();%%00010%%00010%%00009%%00009if (_representation.warnMessage != &quot;&quot;) {%%00010%%00009%%00009%%00009knimeService.setWarningMessage(_representation.warnMessage, &quot;representation_warnMessage&quot;);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009if (_value.options.subscribeSelection) {%%00010%%00009%%00009%%00009knimeService.subscribeToSelection(knimeTable1.getTableId(), selectionChanged);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009outputSelectionColumn();%%00010%%00010%%00009};%%00010%%00010%%00009// Transform data from first port into a hierarchical structure suitable%%00010%%00009// for a partition layout.%%00010%%00009var transformData = function() {%%00010%%00009%%00009// Get indices for path columns and frequency column.%%00010%%00009%%00009function indexOf(column) {%%00010%%00009%%00009%%00009return knimeTable1.getColumnNames().indexOf(column);%%00010%%00009%%00009}%%00010%%00009%%00009var pathColumns = _representation.options.pathColumns.map(indexOf);%%00010%%00009%%00009var freqColumn = indexOf(_representation.options.freqColumn);%%00010%%00010%%00009%%00009// Check which rows are included by the filter/selection.%%00010%%00009%%00009var includedRows = knimeTable1.getRows().filter(function(row) {%%00010%%00009%%00009%%00009var includedInFilter = !currentFilter || knimeTable1.isRowIncludedInFilter(row.rowKey, currentFilter);%%00010%%00009%%00009%%00009// var includedInSelection = !_value.options.showSelectedOnly || selectedRows.length == 0 || selectedRows.indexOf(row.rowKey) != -1;%%00010%%00009%%00009%%00009var includedInSelection = !_value.options.showSelectedOnly || selectedRows.indexOf(row.rowKey) != -1;%%00010%%00009%%00009%%00009return includedInFilter &amp;&amp; includedInSelection;%%00010%%00009%%00009});%%00010%%00010%%00009%%00009// Get all unique labels from path columns.%%00010%%00009%%00009var notNull = function(value) { return value !== null; };%%00010%%00009%%00009var accumulate = function(accumulator, array) { return accumulator.concat(array); };%%00010%%00009%%00009var onlyUnique = function(value, index, self) { return self.indexOf(value) === index; };%%00010%%00010%%00009%%00009uniqueLabels = pathColumns%%00010%%00009%%00009.map(function(columnId) {%%00010%%00009%%00009%%00009var uniqueLabelsOfColumn = includedRows.map(function(row) {%%00010%%00009%%00009%%00009%%00009return row.data[columnId];%%00010%%00009%%00009%%00009})%%00010%%00009%%00009%%00009.filter(notNull)%%00010%%00009%%00009%%00009.filter(onlyUnique);%%00010%%00010%%00009%%00009%%00009return uniqueLabelsOfColumn;%%00010%%00009%%00009})%%00010%%00009%%00009.reduce(accumulate, [])%%00010%%00009%%00009.filter(onlyUnique);%%00010%%00010%%00010%%00009%%00009// make sure that reserved names do not collide whith user given classes%%00010%%00009%%00009while (uniqueLabels.indexOf(rootNodeName) &gt; -1) {%%00010%%00009%%00009%%00009rootNodeName += &quot;_&quot;;%%00010%%00009%%00009}%%00010%%00009%%00009while (uniqueLabels.indexOf(nullNodeName) &gt; -1) {%%00010%%00009%%00009%%00009nullNodeName += &quot;_&quot;;%%00010%%00009%%00009}%%00010%%00010%%00009%%00009var id = 0;%%00010%%00010%%00009%%00009// Initialize _data object%%00010%%00009%%00009_data = {%%00010%%00009%%00009%%00009%%00009id: id++,%%00010%%00009%%00009%%00009%%00009name: rootNodeName,%%00010%%00009%%00009%%00009%%00009children: [],%%00010%%00009%%00009%%00009%%00009active: false,%%00010%%00009%%00009%%00009%%00009highlited: false,%%00010%%00009%%00009%%00009%%00009selected: false%%00010%%00009%%00009};%%00010%%00010%%00010%%00009%%00009var missingSizeCount = 0;%%00010%%00009%%00009var missingPathCount = 0;%%00010%%00010%%00009%%00009// Create hierarchical structure.%%00010%%00009%%00009for (var i = 0; i &lt; includedRows.length; i++) {%%00010%%00010%%00009%%00009%%00009var size = includedRows[i].data[freqColumn];%%00010%%00009%%00009%%00009if (size === null || isNaN(size)) {%%00010%%00009%%00009%%00009%%00009missingSizeCount++;%%00010%%00009%%00009%%00009%%00009size = 0;%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009size = Math.abs(size);%%00010%%00010%%00009%%00009%%00009// get array of path elements from current row%%00010%%00009%%00009%%00009var parts = pathColumns.map(function(col) { return includedRows[i].data[col]; });%%00010%%00009%%00009%%00009// Remove trailing nulls%%00010%%00009%%00009%%00009while(parts[parts.length-1] === null) {%%00010%%00009%%00009%%00009%%00009parts.pop();%%00010%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009if (parts.length === 0) {%%00010%%00009%%00009%%00009%%00009missingPathCount++;%%00010%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009// Loop over path elements,%%00010%%00009%%00009%%00009// append to hierarchical structure%%00010%%00009%%00009%%00009var currentNode = _data;%%00010%%00009%%00009%%00009for (var j = 0; j &lt; parts.length; j++) {%%00010%%00009%%00009%%00009%%00009var children = currentNode[&quot;children&quot;];%%00010%%00009%%00009%%00009%%00009if (parts[j] === null) {%%00010%%00009%%00009%%00009%%00009%%00009var nodeName = nullNodeName;%%00010%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009var nodeName = parts[j];%%00010%%00009%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009%%00009var childNode;%%00010%%00009%%00009%%00009%%00009if (j + 1 &lt; parts.length) {%%00010%%00009%%00009%%00009%%00009%%00009// Not yet at the end of the sequence; move down the tree.%%00010%%00009%%00009%%00009%%00009%%00009var foundChild = false;%%00010%%00009%%00009%%00009%%00009%%00009for (var k = 0; k &lt; children.length; k++) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009if (children[k][&quot;name&quot;] === nodeName) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009childNode = children[k];%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009foundChild = true;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009break;%%00010%%00009%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009// If we don't already have a child node for this branch, create it.%%00010%%00009%%00009%%00009%%00009%%00009if (!foundChild) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009childNode = {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009id: id++,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009name: nodeName,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009children: [],%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009active: false,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009highlited: false,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009selected: false%%00010%%00009%%00009%%00009%%00009%%00009%%00009};%%00010%%00009%%00009%%00009%%00009%%00009%%00009children.push(childNode);%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009currentNode = childNode;%%00010%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009// Reached the end of the sequence; create a leaf node.%%00010%%00009%%00009%%00009%%00009%%00009childNode = {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009id: id++,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009name: nodeName,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009size: size,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009children: [],%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009active: false,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009highlited: false,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009selected: false,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009rowKey: includedRows[i].rowKey%%00010%%00009%%00009%%00009%%00009%%00009};%%00010%%00009%%00009%%00009%%00009%%00009children.push(childNode);%%00010%%00010%%00009%%00009%%00009%%00009%%00009// Add id of leaf to [row -&gt; leaf]-data-structure. %%00010%%00009%%00009%%00009%%00009%%00009rowKey2leaf[includedRows[i].rowKey] = childNode;%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00009%%00009if (missingPathCount &gt; 0) {%%00010%%00009%%00009%%00009knimeService.setWarningMessage(missingPathCount + &quot; rows are not display because of missing path.&quot;, &quot;missingPathCount&quot;);%%00010%%00009%%00009}%%00010%%00009%%00009if ((_representation.options.freqColumn != null) &amp;&amp; (missingSizeCount &gt; 0) ) {%%00010%%00009%%00009%%00009knimeService.setWarningMessage(missingSizeCount + &quot; have a missing numeric value. The value defaults to zero.&quot;, &quot;missingSizeCount&quot;);%%00010%%00009%%00009}%%00010%%00009};%%00010%%00010%%00009var setColors = function() {%%00010%%00009%%00009var useCustomColors = (_representation.inObjects[1] != null) &amp;&amp; (_representation.inObjects[1].labels != null);%%00010%%00009%%00009var showWarning = (_representation.inObjects[1] != null) &amp;&amp; (_representation.inObjects[1].labels == null);%%00010%%00010%%00009%%00009if (showWarning) {%%00010%%00009%%00009%%00009knimeService.setWarningMessage(&quot;Your color model does not provide a 'label' attribute.&quot;, &quot;colormodel&quot;);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009if (useCustomColors) {%%00010%%00009%%00009%%00009var colors = _representation.inObjects[1].colors;%%00010%%00009%%00009%%00009var labels = _representation.inObjects[1].labels;%%00010%%00009%%00009%%00009var colorMap = {}%%00010%%00009%%00009%%00009for (var i = 0; i &lt; colors.length; i++) {%%00010%%00009%%00009%%00009%%00009colorMap[labels[i]] = colors[i];%%00010%%00009%%00009%%00009}%%00010%%00009%%00009} else {%%00010%%00009%%00009%%00009if (uniqueLabels.length &lt;= 10) {%%00010%%00009%%00009%%00009%%00009var scale = d3.scale.category10();%%00010%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009var scale = d3.scale.category20();%%00010%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009var colorMap = {};%%00010%%00009%%00009%%00009uniqueLabels.forEach(function(label) { colorMap[label] = scale(label); });%%00010%%00009%%00009}%%00010%%00010%%00009%%00009_colorMap = function(label) {%%00010%%00009%%00009%%00009if (label === rootNodeName || label === nullNodeName) {%%00010%%00009%%00009%%00009%%00009return &quot;#FFFFFF&quot;;%%00010%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009if (colorMap.hasOwnProperty(label)) {%%00010%%00009%%00009%%00009%%00009%%00009return colorMap[label];%%00010%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009return &quot;#000000&quot;;%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00009%%00009_colorMap.entries = d3.entries(colorMap);%%00010%%00009%%00009_colorMap.keys = d3.keys(colorMap);%%00010%%00009};%%00010%%00010%%00009var updateTitles = function(updateChart) {%%00010%%00009%%00009d3.select(&quot;#title&quot;).text(this.value);%%00010%%00009%%00009d3.select(&quot;#subtitle&quot;).text(_value.options.subtitle);%%00010%%00010%%00009%%00009if (updateChart) {%%00010%%00009%%00009%%00009drawChart();%%00010%%00009%%00009}%%00010%%00009};%%00010%%00010%%00009var drawChart = function() {%%00010%%00009%%00009// Remove earlier chart.%%00010%%00009%%00009d3.select(&quot;#layoutContainer&quot;).remove();%%00010%%00010%%00009%%00009/*%%00010%%00009%%00009 * Parse some options.%%00010%%00009%%00009 */%%00010%%00009%%00009var optFullscreen = _representation.options.svg.fullscreen &amp;&amp; _representation.runningInView;%%00010%%00009%%00009var isTitle = _value.options.title !== &quot;&quot; || _value.options.subtitle !== &quot;&quot;;%%00010%%00010%%00009%%00009var body = d3.select(&quot;body&quot;);%%00010%%00010%%00009%%00009// Determine available witdh and height.%%00010%%00009%%00009if (optFullscreen) {%%00010%%00009%%00009%%00009var width = &quot;100%&quot;;%%00010%%00010%%00009%%00009%%00009if (isTitle || !_representation.options.enableViewControls) {%%00010%%00009%%00009%%00009%%00009knimeService.floatingHeader(true);%%00010%%00009%%00009%%00009%%00009var height = &quot;100%&quot;;%%00010%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009knimeService.floatingHeader(false);%%00010%%00009%%00009%%00009%%00009var height = &quot;calc(100% - &quot; + knimeService.headerHeight() + &quot;px)&quot;%%00010%%00009%%00009%%00009}%%00010%%00010%%00009%%00009} else {%%00010%%00009%%00009%%00009var width = _representation.options.svg.width + 'px';%%00010%%00009%%00009%%00009var height = _representation.options.svg.height + 'px';%%00010%%00009%%00009}%%00010%%00010%%00009%%00009layoutContainer = body.append(&quot;div&quot;)%%00010%%00009%%00009.attr(&quot;id&quot;, &quot;layoutContainer&quot;)%%00010%%00009%%00009.attr(&quot;class&quot;, &quot;knime-layout-container&quot;)%%00010%%00009%%00009.style({%%00010%%00009%%00009%%00009&quot;width&quot;: width,%%00010%%00009%%00009%%00009&quot;height&quot;: height,%%00010%%00009%%00009%%00009&quot;min-width&quot;: MIN_WIDTH + &quot;px&quot;,%%00010%%00009%%00009%%00009&quot;min-height&quot;: MIN_HEIGHT + &quot;px&quot;,%%00010%%00009%%00009%%00009&quot;position&quot;: &quot;absolute&quot;%%00010%%00009%%00009});%%00010%%00010%%00009%%00009// create div container to hold svg%%00010%%00009%%00009var svgContainer = layoutContainer.append(&quot;div&quot;)%%00010%%00009%%00009.attr(&quot;id&quot;, &quot;svgContainer&quot;)%%00010%%00009%%00009.attr(&quot;class&quot;, &quot;knime-svg-container&quot;)%%00010%%00009%%00009.style({%%00010%%00009%%00009%%00009&quot;min-width&quot;: MIN_WIDTH + &quot;px&quot;,%%00010%%00009%%00009%%00009&quot;min-height&quot;: MIN_HEIGHT + &quot;px&quot;,%%00010%%00009%%00009%%00009&quot;width&quot;: &quot;100%&quot;,%%00010%%00009%%00009%%00009&quot;height&quot;: &quot;100%&quot;%%00010%%00009%%00009});%%00010%%00010%%00009%%00009// Create the SVG object%%00010%%00009%%00009svg = svgContainer.append(&quot;svg&quot;)%%00010%%00009%%00009.attr({%%00010%%00009%%00009%%00009&quot;id&quot;: &quot;svg&quot;%%00010%%00009%%00009});%%00010%%00010%%00009%%00009// set width / height of svg%%00010%%00009%%00009if (optFullscreen) {%%00010%%00009%%00009%%00009var boundingRect = svgContainer.node().getBoundingClientRect();%%00010%%00009%%00009%%00009var svgWidth = boundingRect.width;%%00010%%00009%%00009%%00009var svgHeight = boundingRect.height;%%00010%%00009%%00009} else {%%00010%%00009%%00009%%00009var svgWidth = _representation.options.svg.width;%%00010%%00009%%00009%%00009var svgHeight = _representation.options.svg.height;%%00010%%00009%%00009}%%00010%%00009%%00009svg%%00010%%00009%%00009.style(&quot;width&quot;, svgWidth + &quot;px&quot;)%%00010%%00009%%00009.style(&quot;height&quot;, svgHeight + &quot;px&quot;)%%00010%%00009%%00009.attr(&quot;width&quot;, svgWidth)%%00010%%00009%%00009.attr(&quot;height&quot;, svgHeight);%%00010%%00010%%00009%%00009// Title%%00010%%00009%%00009svg.append(&quot;text&quot;)%%00010%%00009%%00009.attr(&quot;id&quot;, &quot;title&quot;)%%00010%%00009%%00009.attr(&quot;class&quot;, &quot;knime-title&quot;)%%00010%%00009%%00009.attr(&quot;x&quot;, 20)%%00010%%00009%%00009.attr(&quot;y&quot;, 30)%%00010%%00009%%00009.text(_value.options.title);%%00010%%00010%%00009%%00009// Subtitle%%00010%%00009%%00009svg.append(&quot;text&quot;)%%00010%%00009%%00009.attr(&quot;id&quot;, &quot;subtitle&quot;)%%00010%%00009%%00009.attr(&quot;class&quot;, &quot;knime-subtitle&quot;)%%00010%%00009%%00009.attr(&quot;x&quot;, 20)%%00010%%00009%%00009.attr(&quot;y&quot;, 46)%%00010%%00009%%00009.text(_value.options.subtitle);%%00010%%00010%%00010%%00009%%00009// Compute plotting options%%00010%%00009%%00009var margin = {%%00010%%00009%%00009%%00009%%00009top : isTitle ? 60 : 10,%%00010%%00009%%00009%%00009%%00009%%00009%%00009left : 10,%%00010%%00009%%00009%%00009%%00009%%00009%%00009bottom : 10,%%00010%%00009%%00009%%00009%%00009%%00009%%00009right : 10%%00010%%00009%%00009};%%00010%%00010%%00009%%00009var plottingSurface = svg.append(&quot;g&quot;)%%00010%%00009%%00009.attr(&quot;id&quot;, &quot;plottingSurface&quot;)%%00010%%00009%%00009.attr(&quot;transform&quot;, &quot;translate(&quot; + margin.left + &quot;,&quot; + margin.top + &quot;)&quot;);%%00010%%00010%%00009%%00009var w = Math.max(50, svgWidth - margin.left - margin.right);%%00010%%00009%%00009var h = Math.max(50, svgHeight - margin.top - margin.bottom);%%00010%%00010%%00009%%00009var options = {%%00010%%00009%%00009%%00009%%00009legend: _value.options.legend,%%00010%%00009%%00009%%00009%%00009breadcrumb: _value.options.breadcrumb,%%00010%%00009%%00009%%00009%%00009zoomable: _representation.options.zoomable,%%00010%%00009%%00009%%00009%%00009donutHole: _value.options.donutHole,%%00010%%00009%%00009%%00009%%00009aggregationType: _value.options.aggregationType,%%00010%%00009%%00009%%00009%%00009filterSmallNodes: _value.options.filterSmallNodes%%00010%%00009%%00009};%%00010%%00009%%00009%%00010%%00009%%00009// Check if there is data.%%00010%%00009%%00009if (_data.children.length == 0) {%%00010%%00009%%00009%%00009if (knimeTable1.getNumRows() == 0) {%%00010%%00009%%00009%%00009%%00009svg.append(&quot;text&quot;)%%00010%%00009%%00009%%00009%%00009.attr(&quot;class&quot;, &quot;knime-label&quot;)%%00010%%00009%%00009%%00009%%00009.attr(&quot;text-anchor&quot;, &quot;middle&quot;)%%00010%%00009%%00009%%00009%%00009.attr(&quot;alignment-baseline&quot;, &quot;central&quot;)%%00010%%00009%%00009%%00009%%00009.attr(&quot;x&quot;, w/2)%%00010%%00009%%00009%%00009%%00009.attr(&quot;y&quot;, h/2)%%00010%%00009%%00009%%00009%%00009.attr(&quot;id&quot;, &quot;errorMsg&quot;)%%00010%%00009%%00009%%00009%%00009.text(&quot;Error: No data available&quot;);%%00010%%00009%%00009%%00009} else {   %%00010%%00009%%00009%%00009%%00009knimeService.setWarningMessage(&quot;There is no data to display due to a filter or selection.&quot;, &quot;filter_warnMessage&quot;);%%00010%%00009%%00009%%00009%%00009drawSunburst(_data, plottingSurface, w, h, options);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009} else {%%00010%%00009%%00009%%00009knimeService.setWarningMessage(null, &quot;filter_warnMessage&quot;);%%00010%%00009%%00009%%00009drawSunburst(_data, plottingSurface, w, h, options);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Set resize handler%%00010%%00009%%00009if (optFullscreen) {%%00010%%00009%%00009%%00009var win = document.defaultView || document.parentWindow;%%00010%%00009%%00009%%00009win.onresize = resize;%%00010%%00009%%00009}%%00010%%00009};%%00010%%00010%%00009var drawSunburst = function(data, plottingSurface, width, height, options) {%%00010%%00009%%00009var marginTop = options.breadcrumb ? 40 : 0;%%00010%%00009%%00009var marginLeft = options.legend ? 85 : 0;%%00010%%00010%%00009%%00009// Dimensions of sunburst.%%00010%%00009%%00009var radius = Math.min(width - marginLeft, height - marginTop) / 2;%%00010%%00010%%00009%%00009// Breadcrumb dimensions: width, height, spacing, width of tip/tail.%%00010%%00009%%00009var b = { w: 100, h: 30, s: 3, t: 10 };%%00010%%00010%%00009%%00009var partition = d3.layout.partition()%%00010%%00009%%00009.value(%%00010%%00009%%00009%%00009%%00009_representation.options.freqColumn == null%%00010%%00009%%00009%%00009%%00009? function(d) { return 1; }%%00010%%00009%%00009%%00009%%00009: function(d) { return d.size; }%%00010%%00009%%00009)%%00010%%00010%%00009%%00009// Create list of segment objects with cartesian orientation from data.%%00010%%00009%%00009if (options.filterSmallNodes) {%%00010%%00009%%00009%%00009// For efficiency, filter nodes to keep only those large enough to see.%%00010%%00009%%00009%%00009nodes = partition.nodes(data)%%00010%%00009%%00009%%00009.filter(function(d) {%%00010%%00009%%00009%%00009%%00009return (d.dx &gt; _representation.options.filteringThreshold);%%00010%%00009%%00009%%00009});%%00010%%00009%%00009} else {%%00010%%00009%%00009%%00009nodes = partition.nodes(data);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// The partition layout returns a rectengular hierarchical layout in%%00010%%00009%%00009// a cartesian coordinate space. That is, nodes of the tree get the%%00010%%00009%%00009// attributes x, y, dx, dy (dx,dy = extent of node position).%%00010%%00009%%00009// In its original form the layout has a size of 1x1.%%00010%%00009%%00009// x maps the node's x and dx attribute to an angle.%%00010%%00009%%00009// y maps the node's y and dy attribute to vector length.%%00010%%00009%%00009var x = d3.scale.linear()%%00010%%00009%%00009.range([0, 2 * Math.PI]);%%00010%%00010%%00009%%00009var y = d3.scale.sqrt()%%00010%%00009%%00009.range([0, radius])%%00010%%00010%%00009%%00009if (options.donutHole) {%%00010%%00009%%00009%%00009y.domain([0, 1]);%%00010%%00009%%00009} else {%%00010%%00009%%00009%%00009y.domain([nodes[0].dy, 1]);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Functions to map cartesian orientation of partition layout into radial%%00010%%00009%%00009// orientation of sunburst chart.%%00010%%00009%%00009var arc = d3.svg.arc()%%00010%%00009%%00009.startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x))); })%%00010%%00009%%00009.endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))); })%%00010%%00009%%00009.innerRadius(function(d) { return Math.max(0, y(d.y)); })%%00010%%00009%%00009.outerRadius(function(d) { return Math.max(0, y(d.y + d.dy)); });%%00010%%00010%%00009%%00009// create new group for the sunburst plot (not legend, not breadcrumb)%%00010%%00009%%00009var sunburstGroup = plottingSurface.append(&quot;g&quot;)%%00010%%00009%%00009.attr(&quot;transform&quot;, &quot;translate(&quot; + ((width - marginLeft) / 2) + &quot;,&quot; + ((height + marginTop) / 2) + &quot;)&quot;)%%00010%%00009%%00009.attr(&quot;id&quot;, &quot;sunburstGroup&quot;);%%00010%%00010%%00009%%00009// Bounding circle underneath the sunburst, to make it easier to detect%%00010%%00009%%00009// when the mouse leaves the plottingSurface g.%%00010%%00009%%00009sunburstGroup.append(&quot;svg:circle&quot;)%%00010%%00009%%00009.attr(&quot;r&quot;, radius)%%00010%%00009%%00009.attr(&quot;opacity&quot;, 0);%%00010%%00010%%00010%%00009%%00009var path = sunburstGroup.selectAll(&quot;path&quot;)%%00010%%00009%%00009.data(nodes)%%00010%%00009%%00009.enter().append(&quot;path&quot;)%%00010%%00009%%00009.attr(&quot;d&quot;, arc)%%00010%%00009%%00009.attr(&quot;fill-rule&quot;, &quot;evenodd&quot;)%%00010%%00009%%00009.attr(&quot;fill&quot;, function(d) { return _colorMap(d.name); })%%00010%%00009%%00009.attr(&quot;stroke&quot;,function(d) { return d.selected ? &quot;black&quot; : &quot;white&quot; })%%00010%%00009%%00009.classed(&quot;knime-selected&quot;, function(d) { return d.selected; })%%00010%%00009%%00009.attr(&quot;stroke-width&quot;, 1)%%00010%%00009%%00009.on(&quot;mouseover&quot;, mouseover)%%00010%%00009%%00009.on(&quot;click&quot;, click);%%00010%%00010%%00009%%00009// Basic setup of page elements.%%00010%%00009%%00009if (options.breadcrumb) {%%00010%%00009%%00009%%00009initializeBreadcrumbTrail(plottingSurface);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009if (options.legend) {%%00010%%00009%%00009%%00009drawLegend(plottingSurface, options.breadcrumb, b.h);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009var rootRadius = d3.scale.sqrt().range([0, radius])(nodes[0].dy);%%00010%%00010%%00009%%00009// add explanation in the middle of the circle%%00010%%00009%%00009var explanation = sunburstGroup.append(&quot;g&quot;)%%00010%%00009%%00009.attr(&quot;id&quot;, &quot;explanation&quot;)%%00010%%00009%%00009.attr(&quot;width&quot;, rootRadius * 2)%%00010%%00009%%00009.style({%%00010%%00009%%00009%%00009&quot;position&quot;: &quot;absolute&quot;,%%00010%%00009%%00009%%00009&quot;top&quot;: &quot;260px&quot;,%%00010%%00009%%00009%%00009&quot;left&quot;: &quot;0&quot;,%%00010%%00009%%00009%%00009&quot;text-align&quot;: &quot;center&quot;,%%00010%%00009%%00009%%00009&quot;color&quot;: &quot;#666&quot;,%%00010%%00009%%00009%%00009&quot;z-index&quot;: &quot;-1&quot;,%%00010%%00009%%00009})%%00010%%00009%%00009.attr(&quot;display&quot;, (options.donutHole &amp;&amp; !options.zoom) ? &quot;inline&quot; : &quot;none&quot;);%%00010%%00010%%00009%%00009explanation.append(&quot;text&quot;)%%00010%%00009%%00009.attr(&quot;id&quot;, &quot;percentage&quot;)%%00010%%00009%%00009.attr(&quot;class&quot;, &quot;knime-label&quot;)%%00010%%00009%%00009.attr(&quot;text-anchor&quot;, &quot;middle&quot;)%%00010%%00009%%00009.attr(&quot;alignment-baseline&quot;, &quot;middle&quot;)%%00010%%00009%%00009.attr(&quot;width&quot;, rootRadius * 2)%%00010%%00009%%00009.attr(&quot;font-size&quot;, &quot;2.5em&quot;)%%00010%%00010%%00009%%00009explanation.append(&quot;text&quot;)%%00010%%00009%%00009.attr(&quot;id&quot;, &quot;explanationText&quot;)%%00010%%00009%%00009.attr(&quot;class&quot;, &quot;knime-label&quot;)%%00010%%00009%%00009.attr(&quot;text-anchor&quot;, &quot;middle&quot;)%%00010%%00009%%00009.attr(&quot;alignment-baseline&quot;, &quot;middle&quot;)%%00010%%00009%%00009.attr(&quot;y&quot;, 30)%%00010%%00009%%00009.attr(&quot;width&quot;, rootRadius * 2)%%00010%%00009%%00009.attr(&quot;font-size&quot;, &quot;1.8em&quot;)%%00010%%00009%%00009.attr(&quot;font-weight&quot;, &quot;lighter&quot;);%%00010%%00010%%00010%%00009%%00009// Add transparent circle on top. This is used for clicking / zooming out when donut hole is enabbled.%%00010%%00009%%00009if (options.donutHole) {%%00010%%00009%%00009%%00009sunburstGroup.append(&quot;svg:circle&quot;)%%00010%%00009%%00009%%00009.attr(&quot;id&quot;, &quot;donut_hole_button&quot;)%%00010%%00009%%00009%%00009.attr(&quot;r&quot;, rootRadius)%%00010%%00009%%00009%%00009.attr(&quot;fill&quot;, &quot;none&quot;)%%00010%%00009%%00009%%00009.attr(&quot;pointer-events&quot;, &quot;all&quot;)%%00010%%00009%%00009%%00009.on('click', function() {%%00010%%00009%%00009%%00009%%00009if (mouseMode == &quot;zoom&quot;) {%%00010%%00009%%00009%%00009%%00009%%00009if (zoomNode != null &amp;&amp; zoomNode.parent != null) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009zoom(zoomNode.parent);%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009if (mouseMode == &quot;select&quot;) {%%00010%%00009%%00009%%00009%%00009%%00009clearSelection();%%00010%%00009%%00009%%00009%%00009%%00009if (_value.options.showSelectedOnly) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009highlitedPath = null;%%00010%%00009%%00009%%00009%%00009%%00009%%00009transformData();%%00010%%00009%%00009%%00009%%00009%%00009%%00009drawChart();%%00010%%00009%%00009%%00009%%00009%%00009} %%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009if (mouseMode == &quot;highlite&quot;) {%%00010%%00009%%00009%%00009%%00009%%00009clearHighliting();%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009})%%00010%%00009%%00009%%00009.on(&quot;mouseover&quot;, function() {%%00010%%00009%%00009%%00009%%00009if (mouseMode == &quot;highlite&quot; &amp;&amp; highlitedPath == null) {%%00010%%00009%%00009%%00009%%00009%%00009setPropAllNodes('active', true);%%00010%%00009%%00009%%00009%%00009%%00009sunburstGroup.selectAll(&quot;path&quot;)%%00010%%00009%%00009%%00009%%00009%%00009.attr(&quot;opacity&quot;, function(d) { return ((highlitedPath == null) || d.highlited) ? 1 : 0.3; });%%00010%%00010%%00009%%00009%%00009%%00009%%00009toggleBreadCrumb(false);%%00010%%00009%%00009%%00009%%00009%%00009toggleInnerLabel(false);%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009});%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Get total size of the tree = value of root node from partition.%%00010%%00009%%00009totalSize = path.node().__data__.value;%%00010%%00010%%00009%%00009// Set highliting%%00010%%00009%%00009if (_representation.options.highliting &amp;&amp; mouseMode != &quot;zoom&quot; &amp;&amp; highlitedPath != null) {%%00010%%00009%%00009%%00009var d = getNodeFromPath(highlitedPath); // nodes.filter(function(node) { return node.id == highlitedPath })[0];%%00010%%00009%%00009%%00009if (d != null) {%%00010%%00009%%00009%%00009%%00009highlite(d);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Set selection%%00010%%00009%%00009if (!_value.options.showSelectedOnly &amp;&amp; selectedRows.length &gt; 0 ) {%%00010%%00009%%00009%%00009selectedRows.forEach(function(rowKey) { rowKey2leaf[rowKey].selected = true; addNodeToSelectionBackward(rowKey2leaf[rowKey]); });%%00010%%00009%%00009%%00009renderSelection();%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Set zoom%%00010%%00009%%00009if (_value.options.zoomedPath &amp;&amp; _representation.options.zoomable) {%%00010%%00009%%00009%%00009zoomNode = getNodeFromPath(_value.options.zoomedPath);%%00010%%00010%%00009%%00009%%00009if (_value.options.breadcrumb &amp;&amp; zoomNode.parent != null) {%%00010%%00009%%00009%%00009%%00009updateBreadcrumb(zoomNode.parent);%%00010%%00009%%00009%%00009%%00009toggleBreadCrumb(true);%%00010%%00009%%00009%%00009}%%00010%%00010%%00010%%00009%%00009%%00009path.transition()%%00010%%00009%%00009%%00009.duration(0)%%00010%%00009%%00009%%00009.attrTween(&quot;d&quot;, arcTweenZoom(zoomNode));%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Add the mouseleave handler to the bounding circle.%%00010%%00009%%00009sunburstGroup.on(&quot;mouseleave&quot;, mouseleave);%%00010%%00010%%00009%%00009// Handle clicks on sunburst segments%%00010%%00009%%00009function click(d) {%%00010%%00009%%00009%%00009if (mouseMode == &quot;zoom&quot;) {%%00010%%00009%%00009%%00009%%00009clearHighliting();%%00010%%00009%%00009%%00009%%00009zoom(d);%%00010%%00009%%00009%%00009} else if (mouseMode == &quot;select&quot;){%%00010%%00009%%00009%%00009%%00009select(d);%%00010%%00009%%00009%%00009%%00009if (_value.options.showSelectedOnly) {%%00010%%00009%%00009%%00009%%00009%%00009highlitedPath = null;%%00010%%00009%%00009%%00009%%00009%%00009transformData();%%00010%%00009%%00009%%00009%%00009%%00009drawChart();%%00010%%00009%%00009%%00009%%00009} %%00010%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009clearHighliting();%%00010%%00009%%00009%%00009%%00009setPropAllNodes('active', false);%%00010%%00009%%00009%%00009%%00009highlite(d);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Handle mouseover on sunburst segments%%00010%%00009%%00009function mouseover(d) {%%00010%%00009%%00009%%00009if ((d.name != rootNodeName) &amp;&amp;%%00010%%00009%%00009%%00009%%00009%%00009(mouseMode == &quot;highlite&quot;) &amp;&amp; highlitedPath == null) {%%00010%%00010%%00009%%00009%%00009%%00009// set sunburst segment properties%%00010%%00009%%00009%%00009%%00009setPropAllNodes('active', false);%%00010%%00009%%00009%%00009%%00009setPropsBackward(d, 'active', true);%%00010%%00009%%00009%%00009%%00009sunburstGroup.selectAll(&quot;path&quot;)%%00010%%00009%%00009%%00009%%00009.attr(&quot;opacity&quot;, function(d) { return (d.active || d.highlited) ? 1 : 0.3; });%%00010%%00010%%00009%%00009%%00009%%00009updateStatisticIndicators(d);%%00010%%00009%%00009%%00009%%00009toggleBreadCrumb(true);%%00010%%00009%%00009%%00009%%00009toggleInnerLabel(true);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Handle mouseleave on sunburst segments%%00010%%00009%%00009function mouseleave(d) {%%00010%%00009%%00009%%00009if ((mouseMode == &quot;highlite&quot;) &amp;&amp; highlitedPath == null) {%%00010%%00009%%00009%%00009%%00009// set sunburst segment properties%%00010%%00009%%00009%%00009%%00009setPropAllNodes('active', true);%%00010%%00009%%00009%%00009%%00009sunburstGroup.selectAll(&quot;path&quot;)%%00010%%00009%%00009%%00009%%00009.attr(&quot;opacity&quot;, function(d) { return ((highlitedPath == null) || d.highlited) ? 1 : 0.3; });%%00010%%00010%%00009%%00009%%00009%%00009toggleBreadCrumb(false);%%00010%%00009%%00009%%00009%%00009toggleInnerLabel(false);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Highliting one node and it's ancestors, show inner label / breadcrumb.%%00010%%00009%%00009function highlite(node) {%%00010%%00009%%00009%%00009highlitedPath = getUniquePathToNode(node);%%00010%%00009%%00009%%00009setPropAllNodes('active', false);%%00010%%00009%%00009%%00009setPropAllNodes('highlited', false);%%00010%%00009%%00009%%00009setPropsBackward(node, 'highlited', true);%%00010%%00009%%00009%%00009sunburstGroup.selectAll(&quot;path&quot;)%%00010%%00009%%00009%%00009.attr(&quot;opacity&quot;, function(d) { return d.highlited ? 1 : 0.3; });%%00010%%00010%%00009%%00009%%00009updateStatisticIndicators(node);%%00010%%00009%%00009%%00009toggleBreadCrumb(true);%%00010%%00009%%00009%%00009toggleInnerLabel(true);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009function select(node) {%%00010%%00009%%00009%%00009selectionChangedFlag = true;%%00010%%00010%%00009%%00009%%00009if (d3.event.shiftKey) {%%00010%%00009%%00009%%00009%%00009if (node.selected) {%%00010%%00009%%00009%%00009%%00009%%00009// Remove elements from selection.%%00010%%00009%%00009%%00009%%00009%%00009setPropsBackward(node, &quot;selected&quot;, false);%%00010%%00009%%00009%%00009%%00009%%00009var leafs = setPropsForward(node, &quot;selected&quot;, false);%%00010%%00009%%00009%%00009%%00009%%00009var rowKeys = leafs.map(function(leaf) { return leaf.rowKey; });%%00010%%00009%%00009%%00009%%00009%%00009for (var i = 0; i &lt; rowKeys.length; i++) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009var index = selectedRows.indexOf(rowKeys[i]);%%00010%%00009%%00009%%00009%%00009%%00009%%00009if (index &gt; -1) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009selectedRows.splice(index, 1);%%00010%%00009%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009%%00009%%00009if (_value.options.publishSelection) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009knimeService.removeRowsFromSelection(knimeTable1.getTableId(), rowKeys, selectionChanged);%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009// Add element to selection.%%00010%%00009%%00009%%00009%%00009%%00009var leafs = setPropsForward(node, 'selected', true);%%00010%%00009%%00009%%00009%%00009%%00009addNodeToSelectionBackward(node);%%00010%%00009%%00009%%00009%%00009%%00009var rowKeys = leafs.map(function(leaf) { return leaf.rowKey; });%%00010%%00009%%00009%%00009%%00009%%00009for (var i = 0; i &lt; rowKeys.length; i++) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009var index = selectedRows.indexOf(rowKeys[i]);%%00010%%00009%%00009%%00009%%00009%%00009%%00009if (index == -1) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009selectedRows.push(rowKeys[i]);%%00010%%00009%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009%%00009%%00009if (_value.options.publishSelection) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009knimeService.addRowsToSelection(knimeTable1.getTableId(), rowKeys, selectionChanged);%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009// Set selection.%%00010%%00009%%00009%%00009%%00009setPropAllNodes('selected', false);%%00010%%00009%%00009%%00009%%00009var leafs = setPropsForward(node, 'selected', true);%%00010%%00009%%00009%%00009%%00009addNodeToSelectionBackward(node);%%00010%%00009%%00009%%00009%%00009selectedRows =  leafs.map(function(leaf) { return leaf.rowKey; });%%00010%%00010%%00009%%00009%%00009%%00009if (_value.options.publishSelection) {%%00010%%00009%%00009%%00009%%00009%%00009knimeService.setSelectedRows(knimeTable1.getTableId(), selectedRows, selectionChanged);%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009renderSelection();%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Restore everything to full opacity when moving off the visualization.%%00010%%00009%%00009clearHighliting = function(d) {%%00010%%00009%%00009%%00009highlitedPath = null;%%00010%%00009%%00009%%00009setPropAllNodes('highlited', false);%%00010%%00010%%00009%%00009%%00009sunburstGroup.selectAll(&quot;path&quot;)%%00010%%00009%%00009%%00009.attr(&quot;opacity&quot;, 1);%%00010%%00010%%00009%%00009%%00009toggleBreadCrumb(false);%%00010%%00009%%00009%%00009toggleInnerLabel(false);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009clearSelection = function() {%%00010%%00009%%00009%%00009selectionChangedFlag = true;%%00010%%00010%%00009%%00009%%00009selectedRows = [];%%00010%%00009%%00009%%00009setPropAllNodes('selected', false);%%00010%%00009%%00009%%00009renderSelection();%%00010%%00009%%00009%%00009if (_value.options.publishSelection) {%%00010%%00009%%00009%%00009%%00009knimeService.setSelectedRows(knimeTable1.getTableId(), [], selectionChanged);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00009%%00009%%00010%%00009%%00009// Traverse through tree and add nodes to selection.%%00010%%00009%%00009addNodeToSelectionBackward = function(node) {%%00010%%00009%%00009%%00009if (!node) {%%00010%%00009%%00009%%00009%%00009return;%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009node.selected = true;%%00010%%00009%%00009%%00009var parent = node.parent;%%00010%%00009%%00009%%00009while (parent != null) {%%00010%%00009%%00009%%00009%%00009var allChildrenSelected = parent.children.every(function(child) { return child.selected; });%%00010%%00009%%00009%%00009%%00009if (allChildrenSelected) {%%00010%%00009%%00009%%00009%%00009%%00009parent.selected = true;%%00010%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009break;%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009parent = parent.parent;%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00009%%00009%%00010%%00009%%00009// Draw border around all selected segments.%%00010%%00009%%00009renderSelection = function() {%%00010%%00009%%00009%%00009//var sunburstGroup = d3.select(&quot;g#sunburstGroup&quot;);%%00010%%00009%%00009%%00009if (_value.options.showSelectedOnly) {%%00010%%00009%%00009%%00009%%00009sunburstGroup.selectAll(&quot;path&quot;)%%00010%%00009%%00009%%00009%%00009.attr(&quot;stroke-width&quot;, 1)%%00010%%00009%%00009%%00009%%00009.attr(&quot;stroke&quot;, &quot;white&quot;)%%00010%%00009%%00009%%00009%%00009.classed(&quot;knime-selected&quot;, true);%%00010%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009sunburstGroup.selectAll(&quot;path&quot;)%%00010%%00009%%00009%%00009%%00009.attr(&quot;stroke-width&quot;, function(d) {%%00010%%00009%%00009%%00009%%00009%%00009return d.selected ? 2 : 1;%%00010%%00009%%00009%%00009%%00009})%%00010%%00009%%00009%%00009%%00009.attr(&quot;stroke&quot;,function(d) {%%00010%%00009%%00009%%00009%%00009%%00009return d.selected ? &quot;#333333&quot; : &quot;white&quot;;%%00010%%00009%%00009%%00009%%00009})%%00010%%00009%%00009%%00009%%00009.classed(&quot;knime-selected&quot;, function(d) {%%00010%%00009%%00009%%00009%%00009%%00009return d.selected;%%00010%%00009%%00009%%00009%%00009});%%00010%%00010%%00009%%00009%%00009%%00009// Resort elements in dom so that selected elements%%00010%%00009%%00009%%00009%%00009// are drawn last.%%00010%%00009%%00009%%00009%%00009sunburstGroup.selectAll(&quot;path&quot;).sort(function(a, b) {%%00010%%00009%%00009%%00009%%00009%%00009if (a.selected == b.selected) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009return 0;%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009if (a.selected) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009return 1;%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009return -1;%%00010%%00009%%00009%%00009%%00009});%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00010%%00009%%00009var zoom = function(d) {%%00010%%00009%%00009%%00009path.transition()%%00010%%00009%%00009%%00009.duration(750)%%00010%%00009%%00009%%00009.attrTween(&quot;d&quot;, arcTweenZoom(d));%%00010%%00010%%00009%%00009%%00009if (_value.options.breadcrumb) {%%00010%%00009%%00009%%00009%%00009var parent = d.parent;%%00010%%00009%%00009%%00009%%00009if (parent != null) {%%00010%%00009%%00009%%00009%%00009%%00009updateBreadcrumb(parent);%%00010%%00009%%00009%%00009%%00009%%00009toggleBreadCrumb(true);%%00010%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009toggleBreadCrumb(false);%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009if (d.name === rootNodeName) {%%00010%%00009%%00009%%00009%%00009zoomNode = null;%%00010%%00009%%00009%%00009%%00009delete _value.options.zoomedPath;%%00010%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009zoomNode = d;%%00010%%00009%%00009%%00009%%00009_value.options.zoomedPath = getUniquePathToNode(d);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00010%%00009%%00009resetZoom = function() {%%00010%%00009%%00009%%00009zoom(nodes[0]);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// When zooming: interpolate the scales.%%00010%%00009%%00009function arcTweenZoom(d) {%%00010%%00009%%00009%%00009var zoomToStart = (d.parent == null) || (d.parent.name == rootNodeName); %%00010%%00010%%00009%%00009%%00009if (_value.options.donutHole) {%%00010%%00009%%00009%%00009%%00009y.clamp(true);%%00010%%00009%%00009%%00009%%00009var xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]),%%00010%%00009%%00009%%00009%%00009yd = d3.interpolate(y.domain(), [zoomToStart ? 0 : d.y, 1]),%%00010%%00009%%00009%%00009%%00009yr = d3.interpolate(y.range(), [zoomToStart ? 0 : rootRadius, radius]);%%00010%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009y.clamp(false);%%00010%%00009%%00009%%00009%%00009var xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]),%%00010%%00009%%00009%%00009%%00009yd = d3.interpolate(y.domain(), [zoomToStart ? nodes[0].dy : d.y, 1]),%%00010%%00009%%00009%%00009%%00009yr = d3.interpolate(y.range(), [zoomToStart ? 0 : 20, radius]);%%00010%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009return function(d, i) {%%00010%%00009%%00009%%00009%%00009if (i) {%%00010%%00009%%00009%%00009%%00009%%00009return function(t) { return arc(d); };%%00010%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009return function(t) { x.domain(xd(t)); y.domain(yd(t)).range(yr(t)); return arc(d); };%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009};%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Updates inner label and breadcrumb%%00010%%00009%%00009function updateStatisticIndicators(d) {%%00010%%00009%%00009%%00009if (_value.options.innerLabelStyle === &quot;percentage&quot;) {%%00010%%00009%%00009%%00009%%00009var statistic = (100 * d.value / totalSize).toPrecision(3);%%00010%%00009%%00009%%00009%%00009var statisticString = statistic + &quot;%&quot;;%%00010%%00009%%00009%%00009%%00009if (statistic &lt; 0.1) {%%00010%%00009%%00009%%00009%%00009%%00009statisticString = &quot;&lt; 0.1%&quot;;%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009var statistic = d.value;%%00010%%00009%%00009%%00009%%00009var statisticString = d3.format(&quot;s&quot;)(statistic);%%00010%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009// set inner label and breadcrumb%%00010%%00009%%00009%%00009updateInnerLabel(statisticString);%%00010%%00009%%00009%%00009updateBreadcrumb(d, statisticString);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009function updateInnerLabel(statisticString) {%%00010%%00009%%00009%%00009d3.select(&quot;#percentage&quot;)%%00010%%00009%%00009%%00009.text(statisticString)%%00010%%00009%%00009%%00009.each(wrap)%%00010%%00010%%00009%%00009%%00009d3.select(&quot;#explanationText&quot;)%%00010%%00009%%00009%%00009.text(_value.options.innerLabelText)%%00010%%00009%%00009%%00009.each(wrap);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Update the breadcrumb trail to show the current sequence and percentage.%%00010%%00009%%00009function updateBreadcrumb(d, statisticString) {%%00010%%00009%%00009%%00009// Get Ancestors%%00010%%00009%%00009%%00009var nodeArray = [];%%00010%%00009%%00009%%00009var current = d;%%00010%%00009%%00009%%00009while (current.parent) {%%00010%%00009%%00009%%00009%%00009nodeArray.unshift(current);%%00010%%00009%%00009%%00009%%00009current = current.parent;%%00010%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009// Data join; key function combines name and depth (= position in sequence).%%00010%%00009%%00009%%00009var g = d3.select(&quot;#trail&quot;)%%00010%%00009%%00009%%00009.selectAll(&quot;g&quot;)%%00010%%00009%%00009%%00009.data(nodeArray, function(d) { return d.name + d.depth; });%%00010%%00010%%00009%%00009%%00009// Add breadcrumb and label for entering nodes.%%00010%%00009%%00009%%00009var entering = g.enter().append(&quot;svg:g&quot;);%%00010%%00010%%00009%%00009%%00009entering.append(&quot;svg:polygon&quot;)%%00010%%00009%%00009%%00009.attr(&quot;class&quot;, &quot;knime-tooltip-color&quot;)%%00010%%00009%%00009%%00009.attr(&quot;points&quot;, breadcrumbPoints)%%00010%%00009%%00009%%00009.attr(&quot;fill&quot;, function(d) { return _colorMap(d.name); })%%00010%%00009%%00009%%00009.attr(&quot;stroke&quot;, function(d) { return d.name === nullNodeName ? &quot;black&quot; : &quot;none&quot;; })%%00010%%00009%%00009%%00009.on(&quot;click&quot;, function(d) {%%00010%%00009%%00009%%00009%%00009if (mouseMode == &quot;zoom&quot; &amp;&amp; zoomNode != null) {%%00010%%00009%%00009%%00009%%00009%%00009zoom(d);%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009});%%00010%%00010%%00009%%00009%%00009entering.append(&quot;svg:text&quot;)%%00010%%00009%%00009%%00009.attr(&quot;class&quot;, &quot;knime-tooltip-key&quot;)%%00010%%00009%%00009%%00009.attr(&quot;x&quot;, (b.w + b.t) / 2)%%00010%%00009%%00009%%00009.attr(&quot;y&quot;, b.h / 2)%%00010%%00009%%00009%%00009.attr(&quot;width&quot;, b.w)%%00010%%00009%%00009%%00009.attr(&quot;dy&quot;, &quot;0.35em&quot;)%%00010%%00009%%00009%%00009.attr(&quot;text-anchor&quot;, &quot;middle&quot;)%%00010%%00009%%00009%%00009.attr(&quot;pointer-events&quot;, &quot;none&quot;)%%00010%%00009%%00009%%00009.attr(&quot;fill&quot;, function() {%%00010%%00009%%00009%%00009%%00009var polygonElement = this.previousElementSibling;%%00010%%00009%%00009%%00009%%00009var fill = getComputedStyle(polygonElement).fill;%%00010%%00009%%00009%%00009%%00009var rgb = d3.rgb(fill);%%00010%%00009%%00009%%00009%%00009// brightness formula taken from: https://www.w3.org/TR/AERT#color-contrast%%00010%%00009%%00009%%00009%%00009// brightness range: 0-255%%00010%%00009%%00009%%00009%%00009var brightness = ((rgb.r * 299) + (rgb.g * 587) + (rgb.b * 114)) / 1000;%%00010%%00009%%00009%%00009%%00009if (brightness &lt;= 127) {%%00010%%00009%%00009%%00009%%00009%%00009return &quot;white&quot;;%%00010%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009return &quot;black&quot;;%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009})%%00010%%00009%%00009%%00009.text(function(d) { return d.name; })%%00010%%00009%%00009%%00009.each(wrap);%%00010%%00010%%00009%%00009%%00009setBreadcrumbCursor();%%00010%%00010%%00009%%00009%%00009// Set position for entering and updating nodes.%%00010%%00009%%00009%%00009g.attr(&quot;transform&quot;, function(d, i) {%%00010%%00009%%00009%%00009%%00009return &quot;translate(&quot; + i * (b.w + b.s) + &quot;, 0)&quot;;%%00010%%00009%%00009%%00009});%%00010%%00010%%00009%%00009%%00009// Remove exiting nodes.%%00010%%00009%%00009%%00009g.exit().remove();%%00010%%00010%%00009%%00009%%00009// Now move and update the percentage at the end.%%00010%%00009%%00009%%00009d3.select(&quot;#trail&quot;).select(&quot;#endlabel&quot;)%%00010%%00009%%00009%%00009.attr(&quot;x&quot;, (nodeArray.length + 0.5) * (b.w + b.s))%%00010%%00009%%00009%%00009.attr(&quot;y&quot;, b.h / 2)%%00010%%00009%%00009%%00009.attr(&quot;dy&quot;, &quot;0.35em&quot;)%%00010%%00009%%00009%%00009.attr(&quot;text-anchor&quot;, &quot;middle&quot;)%%00010%%00009%%00009%%00009.text(statisticString)%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Generate a string that describes the points of a breadcrumb polygon.%%00010%%00009%%00009function breadcrumbPoints(d, i) {%%00010%%00009%%00009%%00009var points = [];%%00010%%00009%%00009%%00009points.push(&quot;0,0&quot;);%%00010%%00009%%00009%%00009points.push(b.w + &quot;,0&quot;);%%00010%%00009%%00009%%00009points.push(b.w + b.t + &quot;,&quot; + (b.h / 2));%%00010%%00009%%00009%%00009points.push(b.w + &quot;,&quot; + b.h);%%00010%%00009%%00009%%00009points.push(&quot;0,&quot; + b.h);%%00010%%00009%%00009%%00009if (i &gt; 0) { // Leftmost breadcrumb; don't include 6th vertex.%%00010%%00009%%00009%%00009%%00009points.push(b.t + &quot;,&quot; + (b.h / 2));%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009return points.join(&quot; &quot;);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Show/hide inner label%%00010%%00009%%00009function toggleInnerLabel(visible) {%%00010%%00009%%00009%%00009if (_value.options.innerLabel &amp;&amp; _value.options.donutHole) {%%00010%%00009%%00009%%00009%%00009d3.select(&quot;#explanation&quot;)%%00010%%00009%%00009%%00009%%00009.attr(&quot;display&quot;, visible ? &quot;inline&quot; : &quot;none&quot;);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Show/hide inner breadcrumb%%00010%%00009%%00009function toggleBreadCrumb(visible) {%%00010%%00009%%00009%%00009if (_value.options.breadcrumb)  {%%00010%%00009%%00009%%00009%%00009d3.select(&quot;#trail&quot;)%%00010%%00009%%00009%%00009%%00009.attr(&quot;display&quot;, visible ? &quot;inline&quot; : &quot;none&quot;);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Travers through tree and set property of nodes.%%00010%%00009%%00009function setPropsForward(start, prop, val) {%%00010%%00009%%00009%%00009var stack = [start];%%00010%%00009%%00009%%00009var leafs = [];%%00010%%00010%%00009%%00009%%00009while (stack.length &gt; 0) {%%00010%%00009%%00009%%00009%%00009start = stack.pop();%%00010%%00009%%00009%%00009%%00009if (prop != null &amp;&amp; val != null) {%%00010%%00009%%00009%%00009%%00009%%00009start[prop] = val;%%00010%%00009%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009%%00009if ((start.children == null) || (start.children.length === 0)) {%%00010%%00009%%00009%%00009%%00009%%00009leafs.push(start);%%00010%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009for (var i = 0; i &lt; start.children.length; i++) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009stack.push(start.children[i]);%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009return leafs;%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Travers through tree and set property of nodes.%%00010%%00009%%00009function setPropsBackward(start, prop, val) {%%00010%%00009%%00009%%00009while (start) {%%00010%%00009%%00009%%00009%%00009start[prop] = val;%%00010%%00009%%00009%%00009%%00009start = start.parent;%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00010%%00009%%00009function setPropAllNodes(prop, val) {%%00010%%00009%%00009%%00009for (var i = 0; i &lt; nodes.length; i++) {%%00010%%00009%%00009%%00009%%00009nodes[i][prop] = val;%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00010%%00009%%00009function getUniquePathToNode(d) {%%00010%%00009%%00009%%00009var sequence = [] ;%%00010%%00009%%00009%%00009var parent = d;%%00010%%00009%%00009%%00009while (parent != null) {%%00010%%00009%%00009%%00009%%00009sequence.unshift(parent.name);%%00010%%00009%%00009%%00009%%00009parent = parent.parent;%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009var path = {sequence: sequence, isLeaf: ((d.children == null) || (d.children.length == 0))};%%00010%%00009%%00009%%00009return path;%%00010%%00009%%00009}%%00010%%00010%%00009%%00009function getNodeFromPath(path) {%%00010%%00009%%00009%%00009var current = nodes[0];%%00010%%00009%%00009%%00009for (var i = 1; i &lt; path.sequence.length-1; i++) {%%00010%%00009%%00009%%00009%%00009current = current.children%%00010%%00009%%00009%%00009%%00009.filter(function(child) { return child.name == path.sequence[i]; })[0];%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009var node = current.children%%00010%%00009%%00009%%00009.filter(function(child) { return child.name == path.sequence[path.sequence.length-1]; })%%00010%%00009%%00009%%00009.filter(function(child) { return ((child.children == null) || (child.children.length == 0)) == path.isLeaf; })[0];%%00010%%00010%%00009%%00009%%00009return node;%%00010%%00009%%00009}%%00010%%00010%%00009%%00009function initializeBreadcrumbTrail(plottingSurface) {%%00010%%00009%%00009%%00009// var trail = plottingSurface.append(&quot;svg:svg&quot;)%%00010%%00009%%00009%%00009//    .attr(&quot;width&quot;, width)%%00010%%00009%%00009%%00009//    .attr(&quot;height&quot;, 50)%%00010%%00009%%00009%%00009var trail = plottingSurface.append(&quot;svg:g&quot;)%%00010%%00009%%00009%%00009.attr(&quot;id&quot;, &quot;trail&quot;)%%00010%%00009%%00009%%00009.attr(&quot;class&quot;, &quot;knime-tooltip&quot;);%%00010%%00010%%00009%%00009%%00009// Add the label at the end, for the percentage.%%00010%%00009%%00009%%00009trail.append(&quot;svg:text&quot;)%%00010%%00009%%00009%%00009.attr(&quot;id&quot;, &quot;endlabel&quot;)%%00010%%00009%%00009%%00009.attr(&quot;class&quot;, &quot;knime-tooltip-value&quot;)%%00010%%00009%%00009%%00009.attr(&quot;fill&quot;, &quot;#000&quot;);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009function drawLegend(plottingSurface, breadcrumb, breadcrumbHeight) {%%00010%%00009%%00009%%00009var entries = uniqueLabels.map(function(label) {%%00010%%00009%%00009%%00009%%00009return { key: label, value: _colorMap(label) };%%00010%%00009%%00009%%00009}); %%00010%%00010%%00009%%00009%%00009// Dimensions of legend item: width, height, spacing.%%00010%%00009%%00009%%00009var li = { w: 100, h: 15, s: 6, r: 6 };%%00010%%00010%%00009%%00009%%00009var legend = plottingSurface.append(&quot;g&quot;)%%00010%%00009%%00009%%00009.attr(&quot;class&quot;, &quot;knime-legend&quot;)%%00010%%00009%%00009%%00009.attr(&quot;width&quot;, li.w)%%00010%%00009%%00009%%00009.attr(&quot;height&quot;, entries.length * (li.h + li.s))%%00010%%00009%%00009%%00009.attr(&quot;transform&quot;, &quot;translate(&quot; + (width - li.w) + &quot;, &quot; + (breadcrumb * breadcrumbHeight + 10) + &quot;)&quot;);%%00010%%00010%%00009%%00009%%00009var g = legend.selectAll(&quot;g&quot;)%%00010%%00009%%00009%%00009.data(entries)%%00010%%00009%%00009%%00009.enter().append(&quot;svg:g&quot;)%%00010%%00009%%00009%%00009.attr(&quot;transform&quot;, function(d, i) {%%00010%%00009%%00009%%00009%%00009return &quot;translate(0,&quot; + i * (li.h + li.s) + &quot;)&quot;;%%00010%%00009%%00009%%00009});%%00010%%00010%%00010%%00009%%00009%%00009g.append(&quot;svg:circle&quot;)%%00010%%00009%%00009%%00009.attr(&quot;class&quot;, &quot;knime-legend-symbol&quot;)%%00010%%00009%%00009%%00009.attr(&quot;cx&quot;, 0)%%00010%%00009%%00009%%00009.attr(&quot;cy&quot;, 0.5 * (li.h - li.r))%%00010%%00009%%00009%%00009.attr(&quot;r&quot;, li.r)%%00010%%00009%%00009%%00009.attr(&quot;fill&quot;, function(d) { return d.value; });%%00010%%00010%%00009%%00009%%00009g.append(&quot;svg:text&quot;)%%00010%%00009%%00009%%00009.attr(&quot;class&quot;, &quot;knime-legend-label&quot;)%%00010%%00009%%00009%%00009.attr(&quot;x&quot;, li.r + 5)%%00010%%00009%%00009%%00009.attr(&quot;y&quot;, li.r)%%00010%%00009%%00009%%00009.attr(&quot;width&quot;, li.w)%%00010%%00009%%00009%%00009.attr(&quot;font-size&quot;, 12)%%00010%%00009%%00009%%00009.attr(&quot;dy&quot;, &quot;0.35em&quot;)%%00010%%00009%%00009%%00009.text(function(d) { return d.key; })%%00010%%00009%%00009%%00009.each(wrap);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Wrap text if too long.%%00010%%00009%%00009function wrap() {%%00010%%00009%%00009%%00009var self = d3.select(this),%%00010%%00009%%00009%%00009textLength = self.node().getComputedTextLength(),%%00010%%00009%%00009%%00009text = self.text(),%%00010%%00009%%00009%%00009width = self.attr(&quot;width&quot;);%%00010%%00009%%00009%%00009while (textLength+5 &gt; width &amp;&amp; text.length &gt; 0) {%%00010%%00009%%00009%%00009%%00009text = text.slice(0, -1);%%00010%%00009%%00009%%00009%%00009self.text(text + '...');%%00010%%00009%%00009%%00009%%00009textLength = self.node().getComputedTextLength();%%00010%%00009%%00009%%00009}%%00010%%00009%%00009} %%00010%%00009}%%00010%%00010%%00009function setBreadcrumbCursor() {%%00010%%00009%%00009d3.selectAll(&quot;#trail g polygon&quot;).style(&quot;cursor&quot;, mouseMode == 'zoom' ? &quot;pointer&quot; : &quot;default&quot;);%%00010%%00009}%%00010%%00010%%00009var drawControls = function() {%%00010%%00009%%00009if (!knimeService || !_representation.options.enableViewControls) {%%00010%%00009%%00009%%00009// TODO: error handling?%%00010%%00009%%00009%%00009return;%%00010%%00009%%00009}%%00010%%00010%%00009%%00009if (_representation.options.displayFullscreenButton) {%%00010%%00009%%00009%%00009knimeService.allowFullscreen();%%00010%%00009%%00009}%%00010%%00010%%00009%%00009knimeService.addNavSpacer();%%00010%%00010%%00010%%00009%%00009// Reset controls.%%00010%%00009%%00009if (_representation.options.zoomable) {%%00010%%00009%%00009%%00009knimeService.addButton('zoom-reset-button', 'search-minus', 'Reset Zoom', function() {%%00010%%00009%%00009%%00009%%00009resetZoom();%%00010%%00009%%00009%%00009});%%00010%%00009%%00009}%%00010%%00009%%00009if (_representation.options.selection) {%%00010%%00009%%00009%%00009knimeService.addButton('selection-reset-button', 'minus-square-o', 'Reset Selection', function() {%%00010%%00009%%00009%%00009%%00009clearSelection();%%00010%%00009%%00009%%00009%%00009if (_value.options.showSelectedOnly) {%%00010%%00009%%00009%%00009%%00009%%00009transformData();%%00010%%00009%%00009%%00009%%00009%%00009drawChart();%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009});%%00010%%00009%%00009}%%00010%%00009%%00009if (_representation.options.highliting) {%%00010%%00009%%00009%%00009knimeService.addButton('highlite-reset-button', 'star-o', 'Reset Focus', function() {%%00010%%00009%%00009%%00009%%00009clearHighliting();%%00010%%00009%%00009%%00009});%%00010%%00009%%00009}%%00010%%00010%%00009%%00009knimeService.addNavSpacer();%%00010%%00010%%00009%%00009if (mouseMode == null) {%%00010%%00009%%00009%%00009mouseMode = &quot;highlite&quot;;%%00010%%00009%%00009}%%00010%%00010%%00009%%00009function toggleButton() {%%00010%%00009%%00009%%00009var targetID = &quot;mouse-mode-&quot; + mouseMode;%%00010%%00009%%00009%%00009d3.selectAll(&quot;#knime-service-header .service-button&quot;)%%00010%%00009%%00009%%00009.classed(&quot;active&quot;, function() {%%00010%%00009%%00009%%00009%%00009return targetID == this.getAttribute(&quot;id&quot;);%%00010%%00009%%00009%%00009});%%00010%%00009%%00009%%00009setBreadcrumbCursor();%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// mouse mode controls.%%00010%%00009%%00009if (_representation.options.zoomable) {%%00010%%00009%%00009%%00009knimeService.addButton('mouse-mode-zoom', 'search', 'Mouse Mode &quot;Zoom&quot;', function() {%%00010%%00009%%00009%%00009%%00009mouseMode = &quot;zoom&quot;;%%00010%%00009%%00009%%00009%%00009toggleButton();%%00010%%00009%%00009%%00009});%%00010%%00009%%00009}%%00010%%00009%%00009if (_representation.options.selection) {%%00010%%00009%%00009%%00009knimeService.addButton('mouse-mode-select', 'check-square-o', 'Mouse Mode &quot;Select&quot;', function() {%%00010%%00009%%00009%%00009%%00009mouseMode = &quot;select&quot;;%%00010%%00009%%00009%%00009%%00009toggleButton();%%00010%%00009%%00009%%00009});%%00010%%00009%%00009}%%00010%%00009%%00009if (_representation.options.highliting) {%%00010%%00009%%00009%%00009knimeService.addButton('mouse-mode-highlite', 'star', 'Mouse Mode &quot;Focus&quot;', function() {%%00010%%00009%%00009%%00009%%00009mouseMode = &quot;highlite&quot;;%%00010%%00009%%00009%%00009%%00009toggleButton();%%00010%%00009%%00009%%00009});%%00010%%00009%%00009}%%00010%%00009%%00009toggleButton();%%00010%%00010%%00009%%00009// Title / Subtitle configuration%%00010%%00009%%00009var titleEdit = _representation.options.enableTitleEdit;%%00010%%00009%%00009var subtitleEdit = _representation.options.enableSubtitleEdit;%%00010%%00009%%00009if (titleEdit || subtitleEdit) {%%00010%%00009%%00009%%00009if (titleEdit) {%%00010%%00009%%00009%%00009%%00009var chartTitleText = knimeService.createMenuTextField(%%00010%%00009%%00009%%00009%%00009%%00009%%00009'chartTitleText', _value.options.title, function() {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009if (_value.options.title != this.value) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009_value.options.title = this.value;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009updateTitles(true);%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009%%00009}, true);%%00010%%00009%%00009%%00009%%00009knimeService.addMenuItem('Chart Title:', 'header', chartTitleText);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009if (subtitleEdit) {%%00010%%00009%%00009%%00009%%00009var chartSubtitleText = knimeService.createMenuTextField(%%00010%%00009%%00009%%00009%%00009%%00009%%00009'chartSubtitleText', _value.options.subtitle,%%00010%%00009%%00009%%00009%%00009%%00009%%00009function() {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009if (_value.options.subtitle != this.value) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009_value.options.subtitle = this.value;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009updateTitles(true);%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009%%00009}, true);%%00010%%00009%%00009%%00009%%00009knimeService.addMenuItem('Chart Subtitle:', 'header', chartSubtitleText, null, knimeService.SMALL_ICON);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Filter-small-nodes configuration%%00010%%00009%%00009var filterSmallNodesToggle = _representation.options.filterSmallNodesToggle;%%00010%%00009%%00009if (filterSmallNodesToggle) {%%00010%%00009%%00009%%00009knimeService.addMenuDivider();%%00010%%00010%%00009%%00009%%00009var filterSmallCheckbox = knimeService.createMenuCheckbox(%%00010%%00009%%00009%%00009%%00009%%00009'filterSmallNodesCheckbox', _value.options.filterSmallNodes, function() {%%00010%%00009%%00009%%00009%%00009%%00009%%00009_value.options.filterSmallNodes = this.checked;%%00010%%00009%%00009%%00009%%00009%%00009%%00009drawChart();%%00010%%00009%%00009%%00009%%00009%%00009});%%00010%%00009%%00009%%00009knimeService.addMenuItem('Filter out small nodes:', 'search', filterSmallCheckbox);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Legend / Breacdcrumb%%00010%%00009%%00009var legendToggle = _representation.options.legendToggle;%%00010%%00009%%00009var breadcrumbToggle = _representation.options.breadcrumbToggle;%%00010%%00009%%00009if (legendToggle || breadcrumbToggle) {%%00010%%00009%%00009%%00009knimeService.addMenuDivider();%%00010%%00010%%00009%%00009%%00009if (legendToggle) {%%00010%%00009%%00009%%00009%%00009var legendCheckbox = knimeService.createMenuCheckbox(%%00010%%00009%%00009%%00009%%00009%%00009%%00009'legendCheckbox', _value.options.legend,%%00010%%00009%%00009%%00009%%00009%%00009%%00009function() {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009_value.options.legend = this.checked;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009drawChart();%%00010%%00009%%00009%%00009%%00009%%00009%%00009});%%00010%%00009%%00009%%00009%%00009knimeService.addMenuItem('Legend:', 'info-circle', legendCheckbox);%%00010%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009if (breadcrumbToggle) {%%00010%%00009%%00009%%00009%%00009var breadcrumbCheckbox = knimeService.createMenuCheckbox(%%00010%%00009%%00009%%00009%%00009%%00009%%00009'breadcrumbCheckbox', _value.options.breadcrumb,%%00010%%00009%%00009%%00009%%00009%%00009%%00009function() {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009_value.options.breadcrumb = this.checked;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009drawChart();%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009if (this.checked &amp;&amp; highlitedPath != null) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009toggleBreadCrumb(true);%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009%%00009});%%00010%%00010%%00009%%00009%%00009%%00009knimeService.addMenuItem('Breadcrumb:', 'ellipsis-h', breadcrumbCheckbox);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Donut hole configuration%%00010%%00009%%00009var donutHoleToggle = _representation.options.donutHoleToggle;%%00010%%00009%%00009if (donutHoleToggle) {%%00010%%00009%%00009%%00009knimeService.addMenuDivider();%%00010%%00010%%00009%%00009%%00009var donutHoleCheckbox = knimeService.createMenuCheckbox(%%00010%%00009%%00009%%00009%%00009%%00009'donutHoleCheckbox', _value.options.donutHole, function() {%%00010%%00009%%00009%%00009%%00009%%00009%%00009_value.options.donutHole = this.checked;%%00010%%00009%%00009%%00009%%00009%%00009%%00009drawChart();%%00010%%00009%%00009%%00009%%00009%%00009});%%00010%%00009%%00009%%00009knimeService.addMenuItem('Donut hole:', 'search', donutHoleCheckbox);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Inner label configuration%%00010%%00009%%00009var innerLabelToggle = _representation.options.innerLabelToggle;%%00010%%00009%%00009var innerLabelStyleSelect = _representation.options.innerLabelStyleSelect;%%00010%%00009%%00009var enableInnerLabelEdit = _representation.options.enableInnerLabelEdit;%%00010%%00009%%00009if (innerLabelToggle || innerLabelStyleSelect || enableInnerLabelEdit) {%%00010%%00009%%00009%%00009knimeService.addMenuDivider();%%00010%%00010%%00009%%00009%%00009if (innerLabelToggle) {%%00010%%00009%%00009%%00009%%00009var innerLabelCheckbox = knimeService.createMenuCheckbox(%%00010%%00009%%00009%%00009%%00009%%00009%%00009'innerLabelCheckbox', _value.options.innerLabel,%%00010%%00009%%00009%%00009%%00009%%00009%%00009function() {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009_value.options.innerLabel = this.checked;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009toggleInnerLabel(true);%%00010%%00009%%00009%%00009%%00009%%00009%%00009});%%00010%%00009%%00009%%00009%%00009knimeService.addMenuItem('Inner Label:', 'dot-circle-o', innerLabelCheckbox);%%00010%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009if (innerLabelStyleSelect) {%%00010%%00009%%00009%%00009%%00009var innerLabelStyleSelector =%%00010%%00009%%00009%%00009%%00009%%00009knimeService.createMenuSelect('innerLabelStyleSelector', _value.options.innerLabelStyle, innerLabelStyles, function() {%%00010%%00009%%00009%%00009%%00009%%00009%%00009_value.options.innerLabelStyle = this.options[this.selectedIndex].value;%%00010%%00009%%00009%%00009%%00009%%00009%%00009drawChart();%%00010%%00009%%00009%%00009%%00009%%00009});%%00010%%00009%%00009%%00009%%00009knimeService.addMenuItem('Inner Label Style:', 'percent', innerLabelStyleSelector);%%00010%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009if (enableInnerLabelEdit) {%%00010%%00009%%00009%%00009%%00009var innerLabelText = knimeService.createMenuTextField(%%00010%%00009%%00009%%00009%%00009%%00009%%00009'innerLabelText', _value.options.innerLabelText, function() {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009_value.options.innerLabelText = this.value;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009drawChart();%%00010%%00009%%00009%%00009%%00009%%00009%%00009}, true);%%00010%%00009%%00009%%00009%%00009knimeService.addMenuItem('Inner Label Text:', 'header', innerLabelText);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// show selection only%%00010%%00009%%00009if (_representation.options.selection &amp;&amp; _representation.options.showSelectedOnlyToggle) {%%00010%%00009%%00009%%00009knimeService.addMenuDivider();%%00010%%00009%%00009%%00009var showSelectedOnlyCheckbox = knimeService.createMenuCheckbox('showSelectedOnlyCheckbox', _value.options.showSelectedOnly, function() {%%00010%%00009%%00009%%00009%%00009_value.options.showSelectedOnly = this.checked;%%00010%%00009%%00009%%00009%%00009if (this.checked) {%%00010%%00009%%00009%%00009%%00009%%00009highlitedPath = null;%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009transformData();%%00010%%00009%%00009%%00009%%00009drawChart();%%00010%%00009%%00009%%00009});%%00010%%00009%%00009%%00009knimeService.addMenuItem('Show selected rows only', 'filter', showSelectedOnlyCheckbox);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009if (knimeService.isInteractivityAvailable()) {%%00010%%00009%%00009%%00009// Selection / Filter configuration%%00010%%00009%%00009%%00009var publishSelectionToggle = _representation.options.publishSelectionToggle;%%00010%%00009%%00009%%00009var subscribeSelectionToggle = _representation.options.subscribeSelectionToggle;%%00010%%00009%%00009%%00009var subscribeFilterToggle = _representation.options.subscribeFilterToggle;%%00010%%00009%%00009%%00009if (publishSelectionToggle || subscribeSelectionToggle || subscribeFilterToggle) {%%00010%%00009%%00009%%00009%%00009knimeService.addMenuDivider();%%00010%%00010%%00009%%00009%%00009%%00009if (publishSelectionToggle) {%%00010%%00009%%00009%%00009%%00009%%00009var pubSelIcon = knimeService.createStackedIcon('check-square-o', 'angle-right', 'faded left sm', 'right bold');%%00010%%00009%%00009%%00009%%00009%%00009var pubSelCheckbox = knimeService.createMenuCheckbox('publishSelectionCheckbox', _value.options.publishSelection, function() {%%00010%%00009%%00009%%00009%%00009%%00009%%00009if (this.checked) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009_value.options.publishSelection = true;%%00010%%00009%%00009%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009_value.options.publishSelection = false;%%00010%%00009%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009});%%00010%%00010%%00009%%00009%%00009%%00009%%00009knimeService.addMenuItem('Publish selection', pubSelIcon, pubSelCheckbox);%%00010%%00009%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009%%00009if (subscribeSelectionToggle) {%%00010%%00009%%00009%%00009%%00009%%00009var subSelIcon = knimeService.createStackedIcon('check-square-o', 'angle-double-right', 'faded right sm', 'left bold');%%00010%%00009%%00009%%00009%%00009%%00009var subSelCheckbox = knimeService.createMenuCheckbox('subscribeSelectionCheckbox', _value.options.subscribeSelection, function() {%%00010%%00009%%00009%%00009%%00009%%00009%%00009if (this.checked) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009_value.options.subscribeSelection = true;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009knimeService.subscribeToSelection(knimeTable1.getTableId(), selectionChanged);%%00010%%00009%%00009%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009_value.options.subscribeSelection = false;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009knimeService.unsubscribeSelection(knimeTable1.getTableId(), selectionChanged);%%00010%%00009%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009});%%00010%%00009%%00009%%00009%%00009%%00009knimeService.addMenuItem('Subscribe to selection', subSelIcon, subSelCheckbox);%%00010%%00009%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009%%00009if (subscribeFilterToggle) {%%00010%%00009%%00009%%00009%%00009%%00009var subFilIcon = knimeService.createStackedIcon('filter', 'angle-double-right', 'faded right sm', 'left bold');%%00010%%00009%%00009%%00009%%00009%%00009var subFilCheckbox = knimeService.createMenuCheckbox('subscribeFilterCheckbox', _value.options.subscribeFilter, function() {%%00010%%00009%%00009%%00009%%00009%%00009%%00009_value.options.subscribeSelection = this.checked;%%00010%%00009%%00009%%00009%%00009%%00009%%00009toggleFilter();%%00010%%00009%%00009%%00009%%00009%%00009});%%00010%%00009%%00009%%00009%%00009%%00009knimeService.addMenuItem('Subscribe to filter', subFilIcon, subFilCheckbox);%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00009}%%00010%%00010%%00009var selectionChanged = function(data) {%%00010%%00009%%00009if (data.changeSet) {%%00010%%00009%%00009%%00009if (data.changeSet.removed) {%%00010%%00009%%00009%%00009%%00009for (var i = 0; i &lt; data.changeSet.removed.length; i++) {%%00010%%00009%%00009%%00009%%00009%%00009var removedKey = data.changeSet.removed[i];%%00010%%00009%%00009%%00009%%00009%%00009var parent = rowKey2leaf[removedKey];%%00010%%00009%%00009%%00009%%00009%%00009while (parent != null) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009parent.selected = false;%%00010%%00009%%00009%%00009%%00009%%00009%%00009parent = parent.parent;%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009var index = selectedRows.indexOf(removedKey);%%00010%%00009%%00009%%00009%%00009%%00009if (index &gt; -1) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009selectedRows.splice(index, 1);%%00010%%00009%%00009%%00009%%00009%%00009}           %%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009if (data.changeSet.added) {%%00010%%00009%%00009%%00009%%00009for (var i = 0; i &lt; data.changeSet.added.length; i++) {%%00010%%00009%%00009%%00009%%00009%%00009var addedKey = data.changeSet.added[i];%%00010%%00009%%00009%%00009%%00009%%00009var leaf = rowKey2leaf[addedKey];%%00010%%00009%%00009%%00009%%00009%%00009addNodeToSelectionBackward(leaf);%%00010%%00009%%00009%%00009%%00009%%00009var index = selectedRows.indexOf(addedKey);%%00010%%00009%%00009%%00009%%00009%%00009if (index == -1) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009selectedRows.push(addedKey);%%00010%%00009%%00009%%00009%%00009%%00009}           %%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010%%00009%%00009} else if (data.reevaluate) {%%00010%%00009%%00009%%00009selectedRows = knimeService.getAllRowsForSelection(knimeTable1.getTableId());%%00010%%00009%%00009%%00009setPropAllNodes(&quot;selected&quot;, false);%%00010%%00009%%00009%%00009for (var i = 0; i &lt; selectedRows.length; i++) {%%00010%%00009%%00009%%00009%%00009var leaf = rowKey2leaf[rowKey];%%00010%%00009%%00009%%00009%%00009addNodeToSelectionBackward(leaf);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00010%%00009%%00009if (_value.options.showSelectedOnly) {%%00010%%00009%%00009%%00009highlitedPath = null;%%00010%%00009%%00009%%00009transformData();%%00010%%00009%%00009%%00009drawChart();%%00010%%00009%%00009}%%00010%%00009%%00009renderSelection();%%00010%%00009};%%00010%%00010%%00009var toggleFilter = function() {%%00010%%00009%%00009if (_value.options.subscribeFilter) {%%00010%%00009%%00009%%00009knimeService.subscribeToFilter(%%00010%%00009%%00009%%00009%%00009%%00009knimeTable1.getTableId(), filterChanged, knimeTable1.getFilterIds()%%00010%%00009%%00009%%00009);%%00010%%00009%%00009} else {%%00010%%00009%%00009%%00009knimeService.unsubscribeFilter(knimeTable1.getTableId(), filterChanged);%%00010%%00009%%00009}%%00010%%00009};%%00010%%00010%%00009var filterChanged = function(filter) {%%00010%%00009%%00009currentFilter = filter;%%00010%%00009%%00009highlitedPath = null;%%00010%%00009%%00009transformData();%%00010%%00009%%00009drawChart();%%00010%%00009};%%00010%%00010%%00009var resize = function(event) {%%00010%%00009%%00009drawChart();%%00010%%00009};%%00010%%00010%%00009var outputSelectionColumn = function() {%%00010%%00009%%00009if (_representation.options.selection) {%%00010%%00009%%00009%%00009_value.outColumns.selection = {};%%00010%%00009%%00009%%00009// set selected = false for every row%%00010%%00009%%00009%%00009knimeTable1.getRows().forEach(function(row) {%%00010%%00009%%00009%%00009%%00009_value.outColumns.selection[row.rowKey] = false;%%00010%%00009%%00009%%00009});%%00010%%00009%%00009%%00009// set selected = true for every selected row%%00010%%00009%%00009%%00009selectedRows.forEach(function(rowKey) {%%00010%%00009%%00009%%00009%%00009_value.outColumns.selection[rowKey] = true;%%00010%%00009%%00009%%00009});%%00010%%00009%%00009}%%00010%%00009};%%00010%%00010%%00009view.validate = function() {%%00010%%00009%%00009return true;%%00010%%00009};%%00010%%00010%%00009view.getComponentValue = function() {%%00010%%00009%%00009if (selectionChangedFlag) {%%00010%%00009%%00009%%00009outputSelectionColumn();%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Save mousemode unless it is default mode.%%00010%%00009%%00009_value.options.mouseMode = mouseMode;%%00010%%00009%%00009if (_value.options.mouseMode == &quot;highlite&quot;) {%%00010%%00009%%00009%%00009delete _value.options.mouseMode;%%00010%%00009%%00009}%%00010%%00009%%00009_value.options.selectedRows = selectedRows;%%00010%%00009%%00009if (_value.options.selectedRows.length == 0) {%%00010%%00009%%00009%%00009delete _value.options.selectedRows;%%00010%%00009%%00009}%%00010%%00009%%00009_value.options.highlitedPath = highlitedPath;%%00010%%00009%%00009if (_value.options.highlitedPath == null) {%%00010%%00009%%00009%%00009delete _value.options.highlitedPath;%%00010%%00009%%00009}%%00010%%00010%%00009%%00009return _value;%%00010%%00009};%%00010%%00010%%00009view.getSVG = function() {%%00010%%00009%%00009var svgElement = d3.select(&quot;svg&quot;)[0][0];%%00010%%00009%%00009knimeService.inlineSvgStyles(svgElement);%%00010%%00009%%00009// Return the SVG as a string.%%00010%%00009%%00009return (new XMLSerializer()).serializeToString(svgElement);%%00010%%00009};%%00010%%00010%%00009return view;%%00010}());%%00010"/>
</config>
<config key="cssCode">
<entry key="array-size" type="xint" value="0"/>
</config>
<config key="jsDependencies">
<entry key="numSettings" type="xint" value="2"/>
<config key="dependency_0">
<entry key="name" type="xstring" value="D3"/>
<entry key="path" type="xstring" value="js-lib/d3/d3.v3_5_5.min.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" isnull="true" value=""/>
<config key="dependencies">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
<config key="dependency_1">
<entry key="name" type="xstring" value="jQuery"/>
<entry key="path" type="xstring" value="js-lib/jQuery/jquery-1.11.0.min.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" isnull="true" value=""/>
<config key="dependencies">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
</config>
<config key="cssDependencies">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="new" type="xboolean" value="false"/>
<entry key="inView" type="xboolean" value="true"/>
<config key="tableIds">
<entry key="array-size" type="xint" value="2"/>
<entry key="0" type="xstring" isnull="true" value=""/>
<entry key="1" type="xstring" isnull="true" value=""/>
</config>
<config key="variables">
<entry key="numSettings" type="xint" value="1"/>
<entry key="mapClass" type="xstring" value="string"/>
<entry key="key_0" type="xstring" value="knime.workspace"/>
<entry key="class_0" type="xstring" value="java.lang.String"/>
<entry key="value_0" type="xstring" value="/Users/joelcarvalho/Desktop/Mestrado/Cadeiras/SBS"/>
</config>
<config key="binaryFiles">
<entry key="numSettings" type="xint" value="0"/>
<entry key="mapClass" type="xstring" value="string"/>
</config>
<config key="options">
<entry key="numSettings" type="xint" value="21"/>
<entry key="mapClass" type="xstring" value="object"/>
<entry key="key_0" type="xstring" value="filterSmallNodesToggle"/>
<entry key="class_0" type="xstring" value="java.lang.Boolean"/>
<entry key="value_0" type="xboolean" value="true"/>
<entry key="key_1" type="xstring" value="svg"/>
<entry key="class_1" type="xstring" value="org.knime.dynamic.js.SettingsModelSVGOptions$JSONSVGOptions"/>
<config key="value_1">
<entry key="width" type="xint" value="800"/>
<entry key="height" type="xint" value="600"/>
<entry key="fullscreen" type="xboolean" value="true"/>
</config>
<entry key="key_2" type="xstring" value="innerLabelStyleSelect"/>
<entry key="class_2" type="xstring" value="java.lang.Boolean"/>
<entry key="value_2" type="xboolean" value="true"/>
<entry key="key_3" type="xstring" value="enableTitleEdit"/>
<entry key="class_3" type="xstring" value="java.lang.Boolean"/>
<entry key="value_3" type="xboolean" value="true"/>
<entry key="key_4" type="xstring" value="pathColumns"/>
<entry key="class_4" type="xstring" value="[Ljava.lang.String;"/>
<config key="value_4">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="Recommend (Liquor Name)"/>
</config>
<entry key="key_5" type="xstring" value="legendToggle"/>
<entry key="class_5" type="xstring" value="java.lang.Boolean"/>
<entry key="value_5" type="xboolean" value="true"/>
<entry key="key_6" type="xstring" value="innerLabelToggle"/>
<entry key="class_6" type="xstring" value="java.lang.Boolean"/>
<entry key="value_6" type="xboolean" value="true"/>
<entry key="key_7" type="xstring" value="showSelectedOnlyToggle"/>
<entry key="class_7" type="xstring" value="java.lang.Boolean"/>
<entry key="value_7" type="xboolean" value="true"/>
<entry key="key_8" type="xstring" value="enableInnerLabelEdit"/>
<entry key="class_8" type="xstring" value="java.lang.Boolean"/>
<entry key="value_8" type="xboolean" value="true"/>
<entry key="key_9" type="xstring" value="selection"/>
<entry key="class_9" type="xstring" value="java.lang.Boolean"/>
<entry key="value_9" type="xboolean" value="true"/>
<entry key="key_10" type="xstring" value="publishSelectionToggle"/>
<entry key="class_10" type="xstring" value="java.lang.Boolean"/>
<entry key="value_10" type="xboolean" value="true"/>
<entry key="key_11" type="xstring" value="subscribeSelectionToggle"/>
<entry key="class_11" type="xstring" value="java.lang.Boolean"/>
<entry key="value_11" type="xboolean" value="true"/>
<entry key="key_12" type="xstring" value="zoomable"/>
<entry key="class_12" type="xstring" value="java.lang.Boolean"/>
<entry key="value_12" type="xboolean" value="true"/>
<entry key="key_13" type="xstring" value="freqColumn"/>
<entry key="class_13" type="xstring" value="java.lang.String"/>
<entry key="value_13" type="xstring" value="Bottle Cost"/>
<entry key="key_14" type="xstring" value="enableViewControls"/>
<entry key="class_14" type="xstring" value="java.lang.Boolean"/>
<entry key="value_14" type="xboolean" value="true"/>
<entry key="key_15" type="xstring" value="highliting"/>
<entry key="class_15" type="xstring" value="java.lang.Boolean"/>
<entry key="value_15" type="xboolean" value="true"/>
<entry key="key_16" type="xstring" value="enableSubtitleEdit"/>
<entry key="class_16" type="xstring" value="java.lang.Boolean"/>
<entry key="value_16" type="xboolean" value="true"/>
<entry key="key_17" type="xstring" value="filteringThreshold"/>
<entry key="class_17" type="xstring" value="java.lang.Double"/>
<entry key="value_17" type="xdouble" value="0.001"/>
<entry key="key_18" type="xstring" value="donutHoleToggle"/>
<entry key="class_18" type="xstring" value="java.lang.Boolean"/>
<entry key="value_18" type="xboolean" value="true"/>
<entry key="key_19" type="xstring" value="subscribeFilterToggle"/>
<entry key="class_19" type="xstring" value="java.lang.Boolean"/>
<entry key="value_19" type="xboolean" value="true"/>
<entry key="key_20" type="xstring" value="breadcrumbToggle"/>
<entry key="class_20" type="xstring" value="java.lang.Boolean"/>
<entry key="value_20" type="xboolean" value="true"/>
</config>
<config key="inObjects">
<entry key="numSettings" type="xint" value="2"/>
<config key="inObject_0">
<entry key="knimeDataTableJSON" type="xstring" value="{&quot;@class&quot;:&quot;org.knime.js.core.JSONDataTable&quot;,&quot;id&quot;:&quot;81407771-329b-4d51-bfeb-603e96890c0c&quot;,&quot;rows&quot;:[{&quot;data&quot;:[&quot;Paramount Gold Rum&quot;,6.0],&quot;rowKey&quot;:&quot;Row5&quot;},{&quot;data&quot;:[&quot;Paramount Gold Rum PET&quot;,6.0],&quot;rowKey&quot;:&quot;Row6&quot;},{&quot;data&quot;:[&quot;Bacardi Gold&quot;,6.75],&quot;rowKey&quot;:&quot;Row1&quot;},{&quot;data&quot;:[&quot;Bacardi Gold Mini&quot;,8.31],&quot;rowKey&quot;:&quot;Row2&quot;},{&quot;data&quot;:[&quot;Mt. Gay Eclipse Rum&quot;,14.97],&quot;rowKey&quot;:&quot;Row4&quot;},{&quot;data&quot;:[&quot;Appleton Signature Blend&quot;,15.75],&quot;rowKey&quot;:&quot;Row0&quot;},{&quot;data&quot;:[&quot;Bacardi Gold PET&quot;,22.5],&quot;rowKey&quot;:&quot;Row3&quot;},{&quot;data&quot;:[&quot;Smith &amp; Cross Traditional Jamaican Rum&quot;,23.01],&quot;rowKey&quot;:&quot;Row7&quot;}],&quot;fragment&quot;:false,&quot;filtered&quot;:false,&quot;spec&quot;:{&quot;@class&quot;:&quot;org.knime.js.core.JSONDataTableSpec&quot;,&quot;numRows&quot;:8,&quot;numColumns&quot;:2,&quot;colNames&quot;:[&quot;Recommend (Liquor Name)&quot;,&quot;Bottle Cost&quot;],&quot;possibleValues&quot;:[[&quot;Paramount Gold Rum&quot;,&quot;Paramount Gold Rum PET&quot;,&quot;Bacardi Gold&quot;,&quot;Bacardi Gold Mini&quot;,&quot;Mt. Gay Eclipse Rum&quot;,&quot;Appleton Signature Blend&quot;,&quot;Bacardi Gold PET&quot;,&quot;Smith &amp; Cross Traditional Jamaican Rum&quot;],null],&quot;containsMissingValues&quot;:[false,false],&quot;knimeTypes&quot;:[&quot;String&quot;,&quot;Number (double)&quot;],&quot;rowColorValues&quot;:[&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;],&quot;colTypes&quot;:[&quot;string&quot;,&quot;number&quot;],&quot;colorModels&quot;:[],&quot;filterIds&quot;:[null,null],&quot;maxValues&quot;:[&quot;Smith &amp; Cross Traditional Jamaican Rum&quot;,23.01],&quot;hiddenColumns&quot;:[],&quot;minValues&quot;:[&quot;Appleton Signature Blend&quot;,6.0],&quot;rowSizeValues&quot;:null,&quot;extensionTypes&quot;:[],&quot;numExtensions&quot;:0,&quot;extensionNames&quot;:[]},&quot;dataHash&quot;:null,&quot;fragmentFirstRowIndex&quot;:0,&quot;totalFilteredRows&quot;:0,&quot;totalRows&quot;:0}"/>
</config>
<config key="inObject_1">
<entry key="jsonValue" type="xstring" isnull="true" value=""/>
</config>
</config>
<entry key="warnMessage" type="xstring" value=""/>
<entry key="errorMessage" type="xstring" value=""/>
</config>
