{"backend_state":"running","kernel":"anaconda2019","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":119304192},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.7"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1606901702007,"exec_count":1,"id":"67ffcf","input":"import numpy as np\nimport numpy.linalg as linalg\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt","kernel":"anaconda2019","pos":0,"start":1606901701997,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901702496,"exec_count":2,"id":"40af94","input":"mu_vec = np.array([0,0,0])\ncov_mat = np.array([[1,0,0.8],[0,1,0],[0.8,0,1]])\namostra = np.random.multivariate_normal(mu_vec, cov_mat, 1000).T","kernel":"anaconda2019","pos":1,"start":1606901702480,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901703903,"exec_count":3,"id":"86b64f","input":"fig = plt.figure(figsize=(12,12))\nax = fig.add_subplot(111, projection='3d')\nax.view_init(10, 60)\nax.plot(amostra[0,:], amostra[1,:], amostra[2,:], 'x', markersize=8, color='blue', alpha=0.5)\n","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"[<mpl_toolkits.mplot3d.art3d.Line3D at 0x7f88432b09d0>]"},"exec_count":3},"1":{"data":{"image/png":"a9c566aea215e69eb0caaeea18136fa1124ae480","text/plain":"<Figure size 864x864 with 1 Axes>"},"metadata":{"image/png":{"height":666,"width":683},"needs_background":"light"}}},"pos":2,"start":1606901703169,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901704411,"exec_count":4,"id":"c5a06a","input":"media_x = np.mean(amostra[0,:])\nmedia_y = np.mean(amostra[1,:])\nmedia_z = np.mean(amostra[2,:])\nvector_media = np.array([[media_x],[media_y],[media_z]]) #calculo do vector média da amostra\n","kernel":"anaconda2019","pos":3,"start":1606901704393,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901707224,"exec_count":5,"id":"00f1d1","input":"scatter_matrix = np.zeros((3,3))\nfor i in range(amostra.shape[1]):\n    scatter_matrix += (amostra[:,i].reshape(3,1) - vector_media).dot((amostra[:,i].reshape(3,1) - vector_media).T)\nprint('Scatter Matrix:\\n', scatter_matrix)","kernel":"anaconda2019","output":{"0":{"name":"stdout","text":"Scatter Matrix:\n [[1012.03106974  -53.98877928  843.15055789]\n [ -53.98877928 1049.93611671  -80.47282557]\n [ 843.15055789  -80.47282557 1047.85010481]]\n"}},"pos":4,"start":1606901707161,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901708563,"exec_count":6,"id":"e80303","input":"mat_cov = np.cov([amostra[0,:],amostra[1,:],amostra[2,:]]) #matriz de covariancia amostral","kernel":"anaconda2019","pos":5,"start":1606901708553,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901709487,"exec_count":7,"id":"eaa53b","input":"# vectores e valores proprios da scatter matrix \nvalprop_sc, vect_prop_sc = np.linalg.eig(scatter_matrix)\n\n# vectores e valores proprios da matriz covariancia (amostral)\nvalprop_cov, vect_prop_cov = np.linalg.eig(mat_cov)\n","kernel":"anaconda2019","pos":6,"start":1606901709479,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901710361,"exec_count":8,"id":"71fb79","input":"idx = valprop_sc.argsort()[::-1]   \nvalprop_sc = valprop_sc[idx]\nvect_prop_sc = vect_prop_sc[:,idx]","kernel":"anaconda2019","pos":7,"start":1606901710349,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901711262,"exec_count":9,"id":"c6f749","input":"idx = valprop_cov.argsort()[::-1]   \nvalprop_cov = valprop_cov[idx]\nvect_prop_cov = vect_prop_cov[:,idx] #re-ordenando, por ordem decrescente, os valores próprios, e tomar a mesma ordem para os vectores próprios","kernel":"anaconda2019","pos":8,"start":1606901711253,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901712203,"exec_count":10,"id":"cb8b44","input":"valprop_cov","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"array([1.88605027, 1.04045937, 0.18642058])"},"exec_count":10}},"pos":9,"start":1606901712195,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901713056,"exec_count":11,"id":"03cf89","input":"valprop_sc[0]/valprop_cov[0],valprop_sc[1]/valprop_cov[1],valprop_sc[2]/valprop_cov[2] #a razao entre os valores próprios entre as duas matrizes é constante, usando a mesma ordem decrescente","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"(999.0000000000001, 998.9999999999999, 998.9999999999908)"},"exec_count":11}},"pos":10,"start":1606901713047,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901713745,"exec_count":12,"id":"9781ce","input":"vect_prop_cov","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"array([[-0.69419158,  0.09413929,  0.71360762],\n       [ 0.11349123,  0.99332466, -0.0206363 ],\n       [-0.71078674,  0.06666266, -0.7002416 ]])"},"exec_count":12}},"pos":11,"start":1606901713738,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901714479,"exec_count":13,"id":"5606fc","input":"vect_prop_sc","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"array([[-0.69419158,  0.09413929,  0.71360762],\n       [ 0.11349123,  0.99332466, -0.0206363 ],\n       [-0.71078674,  0.06666266, -0.7002416 ]])"},"exec_count":13}},"pos":12,"start":1606901714471,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901715412,"exec_count":14,"id":"cf8df7","input":"# as colunas das matrizes são iguais (ou seja, têm os mesmos vectores próprios, para a mesma ordenação decrescente de valores próprios)","kernel":"anaconda2019","pos":13,"start":1606901715407,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901716330,"exec_count":15,"id":"a82545","input":"traco_cov=np.trace(mat_cov) #o traço (soma dos elementos diagonais da matriz) é igual à soma dos valores próprios","kernel":"anaconda2019","pos":14,"start":1606901716324,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901717574,"exec_count":16,"id":"ad2c3b","input":"valprop_cov[0]/traco_cov\n","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"0.6058761783582751"},"exec_count":16}},"pos":15,"start":1606901717568,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901720393,"exec_count":17,"id":"683927","input":"(valprop_cov[0]+valprop_cov[1])/traco_cov","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"0.9401141143800474"},"exec_count":17}},"pos":16,"start":1606901720389,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901722144,"exec_count":18,"id":"36bff4","input":"w=vect_prop_cov[:,0:2]","kernel":"anaconda2019","pos":17,"start":1606901722135,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901723155,"exec_count":19,"id":"1b503f","input":"w.shape","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"(3, 2)"},"exec_count":19}},"pos":18,"start":1606901723137,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901723629,"exec_count":20,"id":"351332","input":"w","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"array([[-0.69419158,  0.09413929],\n       [ 0.11349123,  0.99332466],\n       [-0.71078674,  0.06666266]])"},"exec_count":20}},"pos":19,"start":1606901723619,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901724414,"exec_count":21,"id":"0fac9b","input":"w[:,0]","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"array([-0.69419158,  0.11349123, -0.71078674])"},"exec_count":21}},"pos":20,"start":1606901724397,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901725184,"exec_count":22,"id":"9c8f9f","input":"amostraT=amostra.T","kernel":"anaconda2019","pos":21,"start":1606901725178,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901725794,"exec_count":23,"id":"7c044d","input":"prod_inter=amostraT.dot(w)","kernel":"anaconda2019","pos":22,"start":1606901725787,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901726390,"exec_count":24,"id":"a25d29","input":"prod_inter1= prod_inter[:,0]\nprod_inter2= prod_inter[:,1]","kernel":"anaconda2019","pos":23,"start":1606901726385,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901726906,"exec_count":25,"id":"11d15a","input":"amostra_proj1=np.zeros(shape=(3,len(amostra[1])))\namostra_proj2=np.zeros(shape=(3,len(amostra[1])))","kernel":"anaconda2019","pos":24,"start":1606901726897,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901727400,"exec_count":26,"id":"d904ce","input":"for i in range(len(amostra[1])):\n    amostra_proj1[:,i]=prod_inter1[i]*w[:,0]\n    amostra_proj2[:,i]=prod_inter2[i]*w[:,1]","kernel":"anaconda2019","pos":25,"start":1606901727386,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901727825,"exec_count":27,"id":"d1fcb1","input":"amostra_proj=amostra_proj1+amostra_proj2","kernel":"anaconda2019","pos":26,"start":1606901727819,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901728765,"exec_count":28,"id":"e28d35","input":"fig = plt.figure(figsize=(12,12))\nax = fig.add_subplot(111, projection='3d')\nax.view_init(10, 60)\nax.plot(amostra[0,:], amostra[1,:], amostra[2,:], 'x', markersize=8, color='blue', alpha=0.5)\nax.plot(amostra_proj[0,:], amostra_proj[1,:], amostra_proj[2,:], 'o', markersize=8, color='red', alpha=0.5)","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"[<mpl_toolkits.mplot3d.art3d.Line3D at 0x7f88432449d0>]"},"exec_count":28},"1":{"data":{"image/png":"87c22407733dbccaea7e1f9006d625b0a24af21b","text/plain":"<Figure size 864x864 with 1 Axes>"},"metadata":{"image/png":{"height":666,"width":683},"needs_background":"light"}}},"pos":27,"start":1606901728157,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901738038,"exec_count":29,"id":"5c5c6f","input":"plt.figure(figsize=(10,10))\nplt.plot(amostra_proj[0], amostra_proj[1], 'o',color='red', alpha=0.5)\nplt.axis('equal')\nplt.show()","kernel":"anaconda2019","output":{"0":{"data":{"image/png":"8cf8c30e225e55615f0c0bd04f65ee2dc4e22137","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":577,"width":594},"needs_background":"light"}}},"pos":28,"start":1606901737667,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"222004","input":"","pos":29,"type":"cell"}
{"id":0,"time":1606901691387,"type":"user"}
{"last_load":1606901690162,"type":"file"}