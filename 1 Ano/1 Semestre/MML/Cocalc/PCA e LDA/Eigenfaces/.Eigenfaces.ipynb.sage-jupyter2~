{"exec_count":1,"start":1541972663634,"input":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom PIL import Image\n\n%matplotlib inline","state":"done","pos":1,"cell_type":"code","type":"cell","end":1541972663645,"id":"d8a458","kernel":"python3"}
{"exec_count":2,"start":1541972665629,"input":"ids = ['9336923','9338535','anpage','asamma','asewil','astefa','drbost','ekavaz','elduns',\n                  'kaknig','klclar','ksunth','lfso','mbutle','phughe','sbains','slbirc','vstros','yfhsie',\n      'anonym','anonym1','anonym2','cwang','doraj','fordj','hartb','hensm','ieorf','lyond','macci',\n                    'martin','michael','moors','obeidn','robin','sandm','spacl','tony','voudcx'\n      ]","state":"done","pos":3,"cell_type":"code","type":"cell","end":1541972665633,"id":"b38b36","kernel":"python3"}
{"exec_count":3,"start":1541972666929,"input":"f94 = {'female': ['9336923','9338535','anpage','asamma','asewil','astefa','drbost','ekavaz','elduns',\n                  'kaknig','klclar','ksunth','lfso','mbutle','phughe','sbains','slbirc','vstros','yfhsie'],\n      'malestaff': ['anonym','anonym1','anonym2','cwang','doraj','fordj','hartb','hensm','ieorf','lyond','macci',\n                    'martin','michael','moors','obeidn','robin','sandm','spacl','tony','voudcx']}","state":"done","pos":4,"cell_type":"code","type":"cell","end":1541972666932,"id":"fa36c7","kernel":"python3"}
{"output":{"0":{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-97be65014adc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mbase\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'faces94/faces94/{cat}/{p}/{p}.1.jpg'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconvert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'L'\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;32mfor\u001b[0m \u001b[0mcat\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mf94\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mp\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mf94\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcat\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-4-97be65014adc>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mbase\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'faces94/faces94/{cat}/{p}/{p}.1.jpg'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconvert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'L'\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;32mfor\u001b[0m \u001b[0mcat\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mf94\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mp\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mf94\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcat\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/lib/python3/dist-packages/PIL/Image.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(fp, mode)\u001b[0m\n\u001b[1;32m   2546\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2547\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2548\u001b[0;31m         \u001b[0mfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuiltins\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2549\u001b[0m         \u001b[0mexclusive_fp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2550\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'faces94/faces94/female/9336923/9336923.1.jpg'"],"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: 'faces94/faces94/female/9336923/9336923.1.jpg'"}},"exec_count":4,"start":1541972670030,"input":"base = [Image.open(f'faces94/faces94/{cat}/{p}/{p}.1.jpg').convert('L')  for cat in f94 for p in f94[cat]]","state":"done","pos":6,"cell_type":"code","type":"cell","end":1541972670152,"id":"d1f3f9","kernel":"python3"}
{"type":"cell","id":"07b08a","pos":31,"input":"plt.figure(figsize=(15,10))\ni = 0\nfor faceclass in ['malestaff','female']:\n    for setname in f94[faceclass]:\n        iset = [Image.open(f'faces94/faces94/{faceclass}/{setname}/{setname}.{i}.jpg').convert('L') for i in range(1,2)]\n        x, y = np.array([identify(pic) for pic in iset]).T\n        plt.scatter(x,y, s=50)\n        plt.text(x * (1 + 0.02), y * (1 + 0.02), setname)\n        i += 1\nplt.scatter(*identify(input_img), label='Input image', marker=',', c='k', s=100)\nplt.xlabel('Eigenface 1')\nplt.ylabel('Eigenface 2')\nplt.title('Face Space')\nplt.legend(frameon=True)","output":{"0":{"data":{"text/plain":"<matplotlib.legend.Legend at 0x7f2bd77a8dd8>"},"output_type":"execute_result","exec_count":20},"1":{"data":{"image/png":"c1a82c2356acad5334a28bf49cf090248b9de5f0"},"metadata":{"image/png":{"height":657,"width":1038}},"output_type":"execute_result","exec_count":20}},"cell_type":"code","exec_count":20}
{"type":"cell","id":"09b9c2","pos":29,"input":"def identify(img):\n    gamma = np.array(img.getdata())\n    test_phi = gamma - mean\n    test_weights = np.dot(test_phi, e_faces)\n    return test_weights[0:2]","cell_type":"code","exec_count":18}
{"type":"cell","id":"15ce6d","pos":32,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"21457a","pos":21,"input":"test_phi = gamma - mean","cell_type":"code","exec_count":13}
{"type":"cell","id":"26d6f3","pos":27,"input":"if d_min < threshold:\n    name = ids[np.argmin(dist)]\n    print(f'{name}\\ndist={d_min}')\nelse:\n    print('No match found.')","output":{"0":{"name":"stdout","output_type":"stream","text":"spacl\ndist=6604.41185875018\n"}},"cell_type":"code","exec_count":17}
{"type":"cell","id":"2ac214","pos":5,"input":"For each set of faces, we take the first one and add it to the training set.","cell_type":"markdown"}
{"type":"cell","id":"2d95d7","pos":16,"input":"display(plt.matshow(np.reshape(e_faces.T[0], (200,180)), cmap='gray'))","output":{"0":{"data":{"text/plain":"<matplotlib.image.AxesImage at 0x7f2bd78e5c18>"},"output_type":"execute_result","exec_count":10},"1":{"data":{"image/png":"f01bd94d237678ab0a4005ca7723622994dc7cfd"},"metadata":{"image/png":{"height":280,"width":265}},"output_type":"execute_result","exec_count":10}},"cell_type":"code","exec_count":10}
{"type":"cell","id":"355966","pos":22,"input":"test_weights = np.dot(test_phi, e_faces)","cell_type":"code","exec_count":14}
{"type":"cell","id":"37c595","pos":20,"input":"gamma = np.array(input_img.getdata())","cell_type":"code","exec_count":12}
{"type":"cell","id":"471236","pos":24,"input":"dist = [np.linalg.norm(phi[i] - test_phi) for i in range(M)]\nd_min = np.min(dist)","cell_type":"code","exec_count":15}
{"type":"cell","id":"51caf9","pos":23,"input":"### Distance computation","cell_type":"markdown"}
{"type":"cell","id":"652446","pos":12,"input":"e_faces, sigma, v = np.linalg.svd(phi.transpose(), full_matrices=False)","cell_type":"code","exec_count":9}
{"type":"cell","id":"668d91","pos":0,"input":"# Eigenfaces\nWe used the `faces94` dataset for this implementation: https://cswww.essex.ac.uk/mv/allfaces/faces94.zip","cell_type":"markdown"}
{"type":"cell","id":"6d426a","pos":11,"input":"We compute for the eigenvalues and eigenvectors using singular value decomposition.","cell_type":"markdown"}
{"type":"cell","id":"6de936","pos":15,"input":"This is what the first eigenface looks like.","cell_type":"markdown"}
{"type":"cell","id":"84ce85","pos":10,"input":"phi = X - mean","cell_type":"code","exec_count":8}
{"type":"cell","id":"88aa78","pos":7,"input":"M = len(base)","cell_type":"code","exec_count":5}
{"type":"cell","id":"8ca51d","pos":28,"input":"## Visualization of the face space\nWe plot the projections of each training image onto the face space spanned by the first two eigenfaces. The projected input image is represented in the plot as a square.","cell_type":"markdown"}
{"type":"cell","id":"918342","pos":17,"input":"## Face Recognition","cell_type":"markdown"}
{"type":"cell","id":"990bd7","pos":13,"input":"weights = [np.dot(X[i]-mean, e_faces) for i in range(M)]","cell_type":"code","exec_count":21}
{"type":"cell","id":"a5f7bb","pos":26,"input":"threshold = 7000","cell_type":"code","exec_count":16}
{"type":"cell","id":"abfe54","pos":18,"input":"input_img = Image.open(f'faces94/faces94/malestaff/spacl/spacl.19.jpg').convert('L')\ninput_img","output":{"0":{"data":{"image/png":"f45151f9ff5dd06e33a0e9db88d66b6bdccc5a0e"},"output_type":"execute_result","exec_count":11}},"cell_type":"code","exec_count":11}
{"type":"cell","id":"b2a998","pos":30,"input":"plt.style.use('fivethirtyeight')","cell_type":"code","exec_count":19}
{"type":"cell","id":"c13538","pos":19,"input":"### Projection","cell_type":"markdown"}
{"type":"cell","id":"cc0b3e","pos":2,"input":"## Enrollment Process","cell_type":"markdown"}
{"type":"cell","id":"d89625","pos":9,"input":"mean = np.mean(X, 0)","cell_type":"code","exec_count":7}
{"type":"cell","id":"f39276","pos":8,"input":"X = np.array([base[i].getdata() for i in range(M)])","cell_type":"code","exec_count":6}
{"type":"cell","id":"f4b89d","pos":25,"input":"### Match finding","cell_type":"markdown"}
{"type":"cell","id":"ffd2cb","pos":14,"input":"np.shape(weights)","output":{"0":{"data":{"text/plain":"(39, 39)"},"output_type":"execute_result","exec_count":22}},"cell_type":"code","exec_count":22}
{"type":"file","last_load":1541972628232}
{"type":"settings","kernel":"python3","backend_state":"running","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.6"}},"kernel_state":"idle","kernel_usage":{"cpu":0,"memory":74280960},"trust":true}