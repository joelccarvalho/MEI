{"backend_state":"running","kernel":"anaconda2019","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":141758464},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.7"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1606901471907,"exec_count":42,"id":"ba55b6","input":"import numpy as np\nimport numpy.linalg as linalg","kernel":"anaconda2019","pos":0,"start":1606901471904,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901473338,"exec_count":43,"id":"7e071c","input":"mu_vec = np.array([0,0])\ncov_mat = np.array([[1,0.8],[0.8,1]])\namostra = np.random.multivariate_normal(mu_vec, cov_mat, 500).T","kernel":"anaconda2019","pos":2,"start":1606901473333,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901475009,"exec_count":44,"id":"af6bb9","input":"%pylab inline\nfrom matplotlib import pyplot as plt","kernel":"anaconda2019","output":{"0":{"name":"stdout","text":"Populating the interactive namespace from numpy and matplotlib\n"}},"pos":3,"start":1606901474999,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901480902,"exec_count":45,"id":"3a4d77","input":"plt.figure(figsize=(10,10))\nplt.plot(amostra[0], amostra[1], 'x')\nplt.axis('equal')\nplt.show()","kernel":"anaconda2019","output":{"0":{"data":{"image/png":"339a92681e311a0278d76b84247c2916e6aaf5e4","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":574,"width":594},"needs_background":"light"}}},"pos":5,"start":1606901480269,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901486239,"exec_count":46,"id":"99049a","input":"print(amostra.shape)\nmedia_x = np.mean(amostra[0,:])\nmedia_y = np.mean(amostra[1,:])\nprint(media_x)\nprint(media_y)","kernel":"anaconda2019","output":{"0":{"name":"stdout","text":"(2, 500)\n0.07727218606378028\n0.032694715692628454\n"}},"pos":7,"start":1606901486230,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901490040,"exec_count":47,"id":"b5e44c","input":"vector_media = np.array([[media_x],[media_y]])","kernel":"anaconda2019","pos":8,"start":1606901490030,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901491264,"exec_count":48,"id":"1867f8","input":"vector_media","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"array([[0.07727219],\n       [0.03269472]])"},"exec_count":48}},"pos":9,"start":1606901491257,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901556998,"exec_count":50,"id":"33e837","input":"scatter_matrix = np.zeros((2,2))\nprint((amostra[:,5]).reshape(2,1))\nfor i in range(amostra.shape[1]):\n    scatter_matrix += (amostra[:,i].reshape(2,1) - vector_media).dot((amostra[:,i].reshape(2,1) - vector_media).T)\nprint('Scatter Matrix:\\n', scatter_matrix)\n#Esta não é a matriz de covariancia, é a outra","kernel":"anaconda2019","output":{"0":{"name":"stdout","text":"[[-0.40781729]\n [ 0.33680176]]\nScatter Matrix:\n [[499.508275   380.18791303]\n [380.18791303 459.55830868]]\n"}},"pos":11,"start":1606901556984,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901574361,"exec_count":51,"id":"ff0eb0","input":"mat_cov = np.cov([amostra[0,:],amostra[1,:]])","kernel":"anaconda2019","pos":13,"start":1606901574340,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901574414,"exec_count":52,"id":"855deb","input":"print('Matriz de covariância:\\n', cov_mat)\nprint('Matriz de covariância amostral:\\n', mat_cov)\nprint('Matriz de dispersão:\\n', mat_cov*amostra.shape[1])","kernel":"anaconda2019","output":{"0":{"name":"stdout","text":"Matriz de covariância:\n [[1.  0.8]\n [0.8 1. ]]\nMatriz de covariância amostral:\n [[1.00101859 0.76189963]\n [0.76189963 0.92095853]]\nMatriz de dispersão:\n [[500.50929359 380.94981266]\n [380.94981266 460.47926722]]\n"}},"pos":14,"start":1606901574405,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901578759,"exec_count":53,"id":"4922ed","input":"# vectores e valores proprios da scatter matrix \nvalprop_sc, vect_prop_sc = np.linalg.eig(scatter_matrix)\n\n# vectores e valores proprios da matriz covariancia (amostral)\nvalprop_cov, vect_prop_cov = np.linalg.eig(mat_cov)\n","kernel":"anaconda2019","pos":15,"start":1606901578745,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901580741,"exec_count":54,"id":"2ded9f","input":"valprop_sc","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"array([860.24558369,  98.82099999])"},"exec_count":54}},"pos":16,"start":1606901580492,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901582181,"exec_count":55,"id":"1341b2","input":"valprop_cov","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"array([1.72393905, 0.19803808])"},"exec_count":55}},"pos":17,"start":1606901582165,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901584443,"exec_count":56,"id":"54b8f6","input":"idx = valprop_sc.argsort()[::-1]\nvalprop_sc = valprop_sc[idx]\nvect_prop_sc = vect_prop_sc[:,idx]","kernel":"anaconda2019","pos":19,"start":1606901584432,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901585580,"exec_count":57,"id":"8089e4","input":"valprop_sc","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"array([860.24558369,  98.82099999])"},"exec_count":57}},"pos":20,"start":1606901585574,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901586869,"exec_count":58,"id":"232e34","input":"vect_prop_sc","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"array([[ 0.72541967, -0.68830684],\n       [ 0.68830684,  0.72541967]])"},"exec_count":58}},"pos":21,"start":1606901586847,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901589072,"exec_count":59,"id":"79933a","input":"idx = valprop_cov.argsort()[::-1]\nvalprop_cov = valprop_cov[idx]\nvect_prop_cov = vect_prop_cov[:,idx]","kernel":"anaconda2019","pos":23,"start":1606901589059,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901590973,"exec_count":60,"id":"ce96c0","input":"vect_prop_cov","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"array([[ 0.72541967, -0.68830684],\n       [ 0.68830684,  0.72541967]])"},"exec_count":60}},"pos":24,"start":1606901590955,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901592310,"exec_count":61,"id":"cd999f","input":"vect_prop_sc","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"array([[ 0.72541967, -0.68830684],\n       [ 0.68830684,  0.72541967]])"},"exec_count":61}},"pos":25,"start":1606901592298,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901596173,"exec_count":62,"id":"37782e","input":"print(np.trace(amostra))","kernel":"anaconda2019","output":{"0":{"name":"stdout","text":"0.1322010994331891\n"}},"pos":26,"start":1606901596161,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901603226,"exec_count":63,"id":"3361ac","input":"valprop_sc[0]/valprop_cov[0], valprop_sc[1]/valprop_cov[1]","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"(499.0, 498.99999999999864)"},"exec_count":63}},"pos":28,"start":1606901603214,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901609619,"exec_count":64,"id":"ad4f83","input":"traco_cov=np.trace(mat_cov)\ntraco_sc=np.trace(scatter_matrix)\ntraco_sc/traco_cov","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"498.99999999999994"},"exec_count":64}},"pos":30,"start":1606901609606,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901612619,"exec_count":65,"id":"303a0b","input":"valprop_cov[0]/traco_cov","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"0.8969612728989503"},"exec_count":65}},"pos":33,"start":1606901612535,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901619790,"exec_count":66,"id":"7efb03","input":"w=vect_prop_sc[:,0]\nw","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"array([0.72541967, 0.68830684])"},"exec_count":66}},"pos":35,"start":1606901619780,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901620662,"exec_count":67,"id":"62a19e","input":"norm(w)","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"1.0"},"exec_count":67}},"pos":36,"start":1606901620653,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901621613,"exec_count":68,"id":"70a9e2","input":"declive=w[1]/w[0]","kernel":"anaconda2019","pos":37,"start":1606901621604,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901623082,"exec_count":69,"id":"42cf55","input":"declive","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"0.9488394983852112"},"exec_count":69}},"pos":38,"start":1606901623074,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901625316,"exec_count":70,"id":"da30b0","input":"plt.figure(figsize=(10,10))\nplt.plot(amostra[0], amostra[1], 'x')\nt = np.arange(-4, 4, 0.2)\nplt.plot(t, declive*t, 'r--')\nplt.axis('equal')\nplt.show()","kernel":"anaconda2019","output":{"0":{"data":{"image/png":"d0bb28c1ca78ae7ca6ccebb32702df86f601d174","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":574,"width":594},"needs_background":"light"}}},"pos":39,"start":1606901624948,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901635164,"exec_count":71,"id":"82d7c9","input":"amostraT=amostra.T","kernel":"anaconda2019","pos":41,"start":1606901635160,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901635825,"exec_count":72,"id":"c64624","input":"amostraT.shape","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"(500, 2)"},"exec_count":72}},"pos":42,"start":1606901635812,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901636756,"exec_count":73,"id":"47ab8d","input":"prod_inter=amostraT.dot(w)\nprint(prod_inter.shape)","kernel":"anaconda2019","output":{"0":{"name":"stdout","text":"(500,)\n"}},"pos":43,"start":1606901636744,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901640454,"exec_count":74,"id":"067ac1","input":"amostra_proj=numpy.zeros(shape=(2,len(amostra[1])))","kernel":"anaconda2019","pos":45,"start":1606901640448,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901642926,"exec_count":75,"id":"d0cb31","input":"for i in range(len(amostra[1])):\n    amostra_proj[:,i]=prod_inter[i]*w;\n    \nprint(prod_inter[0]*w)","kernel":"anaconda2019","output":{"0":{"name":"stdout","text":"[0.05244741 0.04976417]\n"}},"pos":46,"start":1606901642917,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901646276,"exec_count":76,"id":"ea0c13","input":"plt.figure(figsize=(10,10))\nplt.plot(amostra[0], amostra[1], 'x')\nplt.plot(amostra_proj[0], amostra_proj[1], 'o')\nplt.axis('equal')\nplt.show()","kernel":"anaconda2019","output":{"0":{"data":{"image/png":"abd1593ebd32306ecf99aaa03d6fa71518a80ef2","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":574,"width":594},"needs_background":"light"}}},"pos":48,"start":1606901645876,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901655869,"exec_count":77,"id":"355447","input":"mu_vec = np.array([0,0])\ncov_mat = np.array([[1,0],[0,1]])\namostra = np.random.multivariate_normal(mu_vec, cov_mat, 500).T","kernel":"anaconda2019","pos":50,"start":1606901655857,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901657093,"exec_count":78,"id":"8aff1b","input":"plt.figure(figsize=(10,10))\nplt.plot(amostra[0], amostra[1], 'x')\nplt.axis('equal')\nplt.show()","kernel":"anaconda2019","output":{"0":{"data":{"image/png":"2c707a3028b0b175b502afefad6c305986a2d399","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":574,"width":594},"needs_background":"light"}}},"pos":51,"start":1606901656747,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901658505,"exec_count":79,"id":"9415b3","input":"mat_cov = np.cov([amostra[0,:],amostra[1,:]])","kernel":"anaconda2019","pos":52,"start":1606901658496,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901664768,"exec_count":80,"id":"ac7f0d","input":"valprop_cov, _ = np.linalg.eig(mat_cov)","kernel":"anaconda2019","pos":53,"start":1606901664758,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901666466,"exec_count":81,"id":"cb3a7c","input":"idx = valprop_cov.argsort()[::-1]\nvalprop_cov = valprop_cov[idx]","kernel":"anaconda2019","pos":54,"start":1606901666457,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901667207,"exec_count":82,"id":"f1356b","input":"valprop_cov","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"array([1.10426129, 0.95991453])"},"exec_count":82}},"pos":55,"start":1606901667196,"state":"done","type":"cell"}
{"cell_type":"code","end":1606901669086,"exec_count":83,"id":"d6935d","input":"traco_cov=np.trace(mat_cov)\nvalprop_cov[0]/traco_cov","kernel":"anaconda2019","output":{"0":{"data":{"text/plain":"0.5349647436083659"},"exec_count":83}},"pos":56,"start":1606901669073,"state":"done","type":"cell"}
{"cell_type":"code","id":"310753","input":"","pos":32,"type":"cell"}
{"cell_type":"code","id":"697dea","input":"","pos":59,"type":"cell"}
{"cell_type":"code","id":"6e72c4","input":"","pos":58,"type":"cell"}
{"cell_type":"code","id":"7a5ab8","input":"","pos":57,"type":"cell"}
{"cell_type":"markdown","id":"073a9b","input":"Resta-nos fazer a projecção de cada elemento no espaço gerado por $w$, vector próprio da matriz associado ao maior valor próprio.","pos":40,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0ddfe7","input":"Comparemos os valores próprios da matriz de dispersão e de covariância, e os respectivos vectores próprios. Note que temos que calcular a matriz de covariância relativa à amostra!","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"12e6bf","input":"Infelizmente os valores próprios não são apresentados por ordem...\nhttps://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.linalg.eig.html","pos":18,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"364bc4","input":"Note-se que apesar de se ter gerado aleatoriamente amostras centradas em (0,0), a média amostral pode não ser (0,0)!","pos":6,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"37e702","input":"Como é de esperar, a soma dos valores próprios de cada uma das matrizes, que iguala o traço (soma dos elementos diagonais) da respectiva matriz, terão a mesma razão.","pos":29,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3f5c7a","input":"Tal como previsto, têm os mesmos vectores próprios de norma igual a 1. E sobre os valores próprios, a razão é $n-1$ onde $n$ é o tamanho da amostra.","pos":27,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4e45f6","input":"Construímos a matriz amostra_proj que cujas colunas são as projecções das respectivas amostras em $< w >$.","pos":47,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5139c2","input":"Façamos agora um exercício que mostre que nem sempre é possível (ou aconselhável) aplicar o PCA. Neste caso, não existe uma direcção para a qual a variância seja maior.","pos":49,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5d29f7","input":"Vamos agora \"re-centrar\" os dados e calcular a matriz de dispersão, scatter matrix:","pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"61cd0c","input":"O vector prod_inter contém os productos internos das amostras com o vector $w$.","pos":44,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"71e29a","input":"Cerca de 90% da informação está \"contida\" na direcção do vector próprio associado ao maior valor próprio. Ou seja, aparenta ser boa ideia reduzir de 2 para 1 dimensão.","pos":34,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7530f3","input":"Visualização dos dados:","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"76f448","input":"Vamos gerar amostras aleatórias, seguindo a lei normal e à custa de uma matriz de covariância dada para o efeito.","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7e0c15","input":"Para estudo de grandeza de algum dos valores próprios em relação aos restantes (neste caso em particular só temos 2 valores proprios), vamos ver qual a razão entre o maior valor próprio (ou os maiores), em relação à soma de todos os valores próprios (que iguala o traço). Como vimos, e tratando-se de uma razão, é irrelevante usar a matriz de covariância ou a de dispersão scatter_matrix.","pos":31,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b32832","input":"Façamos o mesmo para a matriz de covariância:","pos":22,"state":"done","type":"cell"}
{"id":0,"time":1606901063204,"type":"user"}
{"last_load":1606901063141,"type":"file"}