{"backend_state":"running","kernel":"anaconda5","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":76410880},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.7"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"222004","input":"","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"67ffcf","input":"import numpy as np\nimport numpy.linalg as linalg\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"cb8b44","input":"valprop_cov","output":{"0":{"data":{"text/plain":"array([1.78020543, 0.94867883, 0.19281904])"},"exec_count":10,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"03cf89","input":"valprop_sc[0]/valprop_cov[0],valprop_sc[1]/valprop_cov[1],valprop_sc[2]/valprop_cov[2] #a razao entre os valores próprios entre as duas matrizes é constante, usando a mesma ordem decrescente","output":{"0":{"data":{"text/plain":"(999.0000000000003, 999.0000000000002, 998.9999999999991)"},"exec_count":11,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"9781ce","input":"vect_prop_cov","output":{"0":{"data":{"text/plain":"array([[ 0.7053222 , -0.00469198, -0.70887134],\n       [-0.00583585,  0.99990578, -0.01242494],\n       [ 0.70886284,  0.01290045,  0.70522837]])"},"exec_count":12,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"5606fc","input":"vect_prop_sc","output":{"0":{"data":{"text/plain":"array([[ 0.7053222 , -0.00469198, -0.70887134],\n       [-0.00583585,  0.99990578, -0.01242494],\n       [ 0.70886284,  0.01290045,  0.70522837]])"},"exec_count":13,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"cf8df7","input":"# as colunas das matrizes são iguais (ou seja, têm os mesmos vectores próprios, para a mesma ordenação decrescente de valores próprios)","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"a82545","input":"traco_cov=np.trace(mat_cov) #o traço (soma dos elementos diagonais da matriz) é igual à soma dos valores próprios","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"ad2c3b","input":"valprop_cov[0]/traco_cov\n","output":{"0":{"data":{"text/plain":"0.6093039750516599"},"exec_count":16,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"683927","input":"(valprop_cov[0]+valprop_cov[1])/traco_cov","output":{"0":{"data":{"text/plain":"0.9340045800827644"},"exec_count":17,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"36bff4","input":"w=vect_prop_cov[:,0:2]","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"1b503f","input":"w.shape","output":{"0":{"data":{"text/plain":"(3, 2)"},"exec_count":19,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"40af94","input":"mu_vec = np.array([0,0,0])\ncov_mat = np.array([[1,0,0.8],[0,1,0],[0.8,0,1]])\namostra = np.random.multivariate_normal(mu_vec, cov_mat, 1000).T","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"351332","input":"w","output":{"0":{"data":{"text/plain":"array([[ 0.7053222 , -0.00469198],\n       [-0.00583585,  0.99990578],\n       [ 0.70886284,  0.01290045]])"},"exec_count":20,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"0fac9b","input":"w[:,0]","output":{"0":{"data":{"text/plain":"array([ 0.7053222 , -0.00583585,  0.70886284])"},"exec_count":21,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"9c8f9f","input":"amostraT=amostra.T","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"7c044d","input":"prod_inter=amostraT.dot(w)","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"a25d29","input":"prod_inter1= prod_inter[:,0]\nprod_inter2= prod_inter[:,1]","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"11d15a","input":"amostra_proj1=np.zeros(shape=(3,len(amostra[1])))\namostra_proj2=np.zeros(shape=(3,len(amostra[1])))","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"d904ce","input":"for i in range(len(amostra[1])):\n    amostra_proj1[:,i]=prod_inter1[i]*w[:,0]\n    amostra_proj2[:,i]=prod_inter2[i]*w[:,1]","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"d1fcb1","input":"amostra_proj=amostra_proj1+amostra_proj2","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"e28d35","input":"fig = plt.figure(figsize=(12,12))\nax = fig.add_subplot(111, projection='3d')\nax.view_init(10, 60)\nax.plot(amostra[0,:], amostra[1,:], amostra[2,:], 'x', markersize=8, color='blue', alpha=0.5)\nax.plot(amostra_proj[0,:], amostra_proj[1,:], amostra_proj[2,:], 'o', markersize=8, color='red', alpha=0.5)","output":{"0":{"data":{"text/plain":"[<mpl_toolkits.mplot3d.art3d.Line3D at 0x7f6c8fa236d8>]"},"exec_count":28,"output_type":"execute_result"},"1":{"data":{"image/png":"d4f216bf37f72a226746079644cc86d4c7e2ec93","text/plain":"<Figure size 864x864 with 1 Axes>"},"exec_count":28,"metadata":{"image/png":{"height":666,"width":683},"needs_background":"light"},"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"5c5c6f","input":"plt.figure(figsize=(10,10))\nplt.plot(amostra_proj[0], amostra_proj[1], 'o',color='red', alpha=0.5)\nplt.axis('equal')\nplt.show()","output":{"0":{"data":{"image/png":"4ac7207f5c421cfef9baae41eb11ced9c3b0c742","text/plain":"<Figure size 720x720 with 1 Axes>"},"exec_count":29,"metadata":{"image/png":{"height":576,"width":595},"needs_background":"light"},"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"86b64f","input":"fig = plt.figure(figsize=(12,12))\nax = fig.add_subplot(111, projection='3d')\nax.view_init(10, 60)\nax.plot(amostra[0,:], amostra[1,:], amostra[2,:], 'x', markersize=8, color='blue', alpha=0.5)\n","output":{"0":{"data":{"text/plain":"[<mpl_toolkits.mplot3d.art3d.Line3D at 0x7f85dce6d3c8>]"},"exec_count":3,"output_type":"execute_result"},"1":{"data":{"image/png":"077017b165842f12a82c4feaa16517932d323859","text/plain":"<Figure size 864x864 with 1 Axes>"},"exec_count":3,"metadata":{"image/png":{"height":666,"width":683},"needs_background":"light"},"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"c5a06a","input":"media_x = np.mean(amostra[0,:])\nmedia_y = np.mean(amostra[1,:])\nmedia_z = np.mean(amostra[2,:])\nvector_media = np.array([[media_x],[media_y],[media_z]]) #calculo do vector média da amostra\n","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"00f1d1","input":"scatter_matrix = np.zeros((3,3))\nfor i in range(amostra.shape[1]):\n    scatter_matrix += (amostra[:,i].reshape(3,1) - vector_media).dot((amostra[:,i].reshape(3,1) - vector_media).T)\nprint('Scatter Matrix:\\n', scatter_matrix)","output":{"0":{"name":"stdout","output_type":"stream","text":"Scatter Matrix:\n [[1006.02960375  -36.01963476  797.95589726]\n [ -36.01963476  992.1783072   -52.5067952 ]\n [ 797.95589726  -52.5067952  1001.24780754]]\n"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"e80303","input":"mat_cov = np.cov([amostra[0,:],amostra[1,:],amostra[2,:]]) #matriz de covariancia amostral","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"eaa53b","input":"# vectores e valores proprios da scatter matrix \nvalprop_sc, vect_prop_sc = np.linalg.eig(scatter_matrix)\n\n# vectores e valores proprios da matriz covariancia (amostral)\nvalprop_cov, vect_prop_cov = np.linalg.eig(mat_cov)\n","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"71fb79","input":"idx = valprop_sc.argsort()[::-1]   \nvalprop_sc = valprop_sc[idx]\nvect_prop_sc = vect_prop_sc[:,idx]","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"c6f749","input":"idx = valprop_cov.argsort()[::-1]   \nvalprop_cov = valprop_cov[idx]\nvect_prop_cov = vect_prop_cov[:,idx] #re-ordenando, por ordem decrescente, os valores próprios, e tomar a mesma ordem para os vectores próprios","pos":8,"type":"cell"}
{"last_load":1576709043237,"type":"file"}